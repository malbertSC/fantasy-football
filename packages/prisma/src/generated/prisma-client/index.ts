// Code generated by Prisma (prisma@1.22.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  flipGamePlayer: (where?: FlipGamePlayerWhereInput) => Promise<boolean>;
  league: (where?: LeagueWhereInput) => Promise<boolean>;
  nflGame: (where?: NflGameWhereInput) => Promise<boolean>;
  nflPlayer: (where?: NflPlayerWhereInput) => Promise<boolean>;
  nflTeam: (where?: NflTeamWhereInput) => Promise<boolean>;
  team: (where?: TeamWhereInput) => Promise<boolean>;
  teamPlayer: (where?: TeamPlayerWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  flipGamePlayer: (
    where: FlipGamePlayerWhereUniqueInput
  ) => FlipGamePlayerPromise;
  flipGamePlayers: (
    args?: {
      where?: FlipGamePlayerWhereInput;
      orderBy?: FlipGamePlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<FlipGamePlayer>;
  flipGamePlayersConnection: (
    args?: {
      where?: FlipGamePlayerWhereInput;
      orderBy?: FlipGamePlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FlipGamePlayerConnectionPromise;
  league: (where: LeagueWhereUniqueInput) => LeaguePromise;
  leagues: (
    args?: {
      where?: LeagueWhereInput;
      orderBy?: LeagueOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<League>;
  leaguesConnection: (
    args?: {
      where?: LeagueWhereInput;
      orderBy?: LeagueOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LeagueConnectionPromise;
  nflGame: (where: NflGameWhereUniqueInput) => NflGamePromise;
  nflGames: (
    args?: {
      where?: NflGameWhereInput;
      orderBy?: NflGameOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<NflGame>;
  nflGamesConnection: (
    args?: {
      where?: NflGameWhereInput;
      orderBy?: NflGameOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => NflGameConnectionPromise;
  nflPlayer: (where: NflPlayerWhereUniqueInput) => NflPlayerPromise;
  nflPlayers: (
    args?: {
      where?: NflPlayerWhereInput;
      orderBy?: NflPlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<NflPlayer>;
  nflPlayersConnection: (
    args?: {
      where?: NflPlayerWhereInput;
      orderBy?: NflPlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => NflPlayerConnectionPromise;
  nflTeam: (where: NflTeamWhereUniqueInput) => NflTeamPromise;
  nflTeams: (
    args?: {
      where?: NflTeamWhereInput;
      orderBy?: NflTeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<NflTeam>;
  nflTeamsConnection: (
    args?: {
      where?: NflTeamWhereInput;
      orderBy?: NflTeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => NflTeamConnectionPromise;
  team: (where: TeamWhereUniqueInput) => TeamPromise;
  teams: (
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Team>;
  teamsConnection: (
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TeamConnectionPromise;
  teamPlayer: (where: TeamPlayerWhereUniqueInput) => TeamPlayerPromise;
  teamPlayers: (
    args?: {
      where?: TeamPlayerWhereInput;
      orderBy?: TeamPlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<TeamPlayer>;
  teamPlayersConnection: (
    args?: {
      where?: TeamPlayerWhereInput;
      orderBy?: TeamPlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TeamPlayerConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createFlipGamePlayer: (
    data: FlipGamePlayerCreateInput
  ) => FlipGamePlayerPromise;
  updateFlipGamePlayer: (
    args: {
      data: FlipGamePlayerUpdateInput;
      where: FlipGamePlayerWhereUniqueInput;
    }
  ) => FlipGamePlayerPromise;
  updateManyFlipGamePlayers: (
    args: {
      data: FlipGamePlayerUpdateManyMutationInput;
      where?: FlipGamePlayerWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertFlipGamePlayer: (
    args: {
      where: FlipGamePlayerWhereUniqueInput;
      create: FlipGamePlayerCreateInput;
      update: FlipGamePlayerUpdateInput;
    }
  ) => FlipGamePlayerPromise;
  deleteFlipGamePlayer: (
    where: FlipGamePlayerWhereUniqueInput
  ) => FlipGamePlayerPromise;
  deleteManyFlipGamePlayers: (
    where?: FlipGamePlayerWhereInput
  ) => BatchPayloadPromise;
  createLeague: (data: LeagueCreateInput) => LeaguePromise;
  updateLeague: (
    args: { data: LeagueUpdateInput; where: LeagueWhereUniqueInput }
  ) => LeaguePromise;
  updateManyLeagues: (
    args: { data: LeagueUpdateManyMutationInput; where?: LeagueWhereInput }
  ) => BatchPayloadPromise;
  upsertLeague: (
    args: {
      where: LeagueWhereUniqueInput;
      create: LeagueCreateInput;
      update: LeagueUpdateInput;
    }
  ) => LeaguePromise;
  deleteLeague: (where: LeagueWhereUniqueInput) => LeaguePromise;
  deleteManyLeagues: (where?: LeagueWhereInput) => BatchPayloadPromise;
  createNflGame: (data: NflGameCreateInput) => NflGamePromise;
  updateNflGame: (
    args: { data: NflGameUpdateInput; where: NflGameWhereUniqueInput }
  ) => NflGamePromise;
  updateManyNflGames: (
    args: { data: NflGameUpdateManyMutationInput; where?: NflGameWhereInput }
  ) => BatchPayloadPromise;
  upsertNflGame: (
    args: {
      where: NflGameWhereUniqueInput;
      create: NflGameCreateInput;
      update: NflGameUpdateInput;
    }
  ) => NflGamePromise;
  deleteNflGame: (where: NflGameWhereUniqueInput) => NflGamePromise;
  deleteManyNflGames: (where?: NflGameWhereInput) => BatchPayloadPromise;
  createNflPlayer: (data: NflPlayerCreateInput) => NflPlayerPromise;
  updateNflPlayer: (
    args: { data: NflPlayerUpdateInput; where: NflPlayerWhereUniqueInput }
  ) => NflPlayerPromise;
  updateManyNflPlayers: (
    args: {
      data: NflPlayerUpdateManyMutationInput;
      where?: NflPlayerWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertNflPlayer: (
    args: {
      where: NflPlayerWhereUniqueInput;
      create: NflPlayerCreateInput;
      update: NflPlayerUpdateInput;
    }
  ) => NflPlayerPromise;
  deleteNflPlayer: (where: NflPlayerWhereUniqueInput) => NflPlayerPromise;
  deleteManyNflPlayers: (where?: NflPlayerWhereInput) => BatchPayloadPromise;
  createNflTeam: (data: NflTeamCreateInput) => NflTeamPromise;
  updateNflTeam: (
    args: { data: NflTeamUpdateInput; where: NflTeamWhereUniqueInput }
  ) => NflTeamPromise;
  updateManyNflTeams: (
    args: { data: NflTeamUpdateManyMutationInput; where?: NflTeamWhereInput }
  ) => BatchPayloadPromise;
  upsertNflTeam: (
    args: {
      where: NflTeamWhereUniqueInput;
      create: NflTeamCreateInput;
      update: NflTeamUpdateInput;
    }
  ) => NflTeamPromise;
  deleteNflTeam: (where: NflTeamWhereUniqueInput) => NflTeamPromise;
  deleteManyNflTeams: (where?: NflTeamWhereInput) => BatchPayloadPromise;
  createTeam: (data: TeamCreateInput) => TeamPromise;
  updateTeam: (
    args: { data: TeamUpdateInput; where: TeamWhereUniqueInput }
  ) => TeamPromise;
  updateManyTeams: (
    args: { data: TeamUpdateManyMutationInput; where?: TeamWhereInput }
  ) => BatchPayloadPromise;
  upsertTeam: (
    args: {
      where: TeamWhereUniqueInput;
      create: TeamCreateInput;
      update: TeamUpdateInput;
    }
  ) => TeamPromise;
  deleteTeam: (where: TeamWhereUniqueInput) => TeamPromise;
  deleteManyTeams: (where?: TeamWhereInput) => BatchPayloadPromise;
  createTeamPlayer: (data: TeamPlayerCreateInput) => TeamPlayerPromise;
  updateTeamPlayer: (
    args: { data: TeamPlayerUpdateInput; where: TeamPlayerWhereUniqueInput }
  ) => TeamPlayerPromise;
  upsertTeamPlayer: (
    args: {
      where: TeamPlayerWhereUniqueInput;
      create: TeamPlayerCreateInput;
      update: TeamPlayerUpdateInput;
    }
  ) => TeamPlayerPromise;
  deleteTeamPlayer: (where: TeamPlayerWhereUniqueInput) => TeamPlayerPromise;
  deleteManyTeamPlayers: (where?: TeamPlayerWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  flipGamePlayer: (
    where?: FlipGamePlayerSubscriptionWhereInput
  ) => FlipGamePlayerSubscriptionPayloadSubscription;
  league: (
    where?: LeagueSubscriptionWhereInput
  ) => LeagueSubscriptionPayloadSubscription;
  nflGame: (
    where?: NflGameSubscriptionWhereInput
  ) => NflGameSubscriptionPayloadSubscription;
  nflPlayer: (
    where?: NflPlayerSubscriptionWhereInput
  ) => NflPlayerSubscriptionPayloadSubscription;
  nflTeam: (
    where?: NflTeamSubscriptionWhereInput
  ) => NflTeamSubscriptionPayloadSubscription;
  team: (
    where?: TeamSubscriptionWhereInput
  ) => TeamSubscriptionPayloadSubscription;
  teamPlayer: (
    where?: TeamPlayerSubscriptionWhereInput
  ) => TeamPlayerSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FlipGamePlayerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "position_ASC"
  | "position_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NflPlayerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "display_name_ASC"
  | "display_name_DESC"
  | "esb_id_ASC"
  | "esb_id_DESC"
  | "first_name_ASC"
  | "first_name_DESC"
  | "gsis_id_ASC"
  | "gsis_id_DESC"
  | "last_name_ASC"
  | "last_name_DESC"
  | "nfl_feed_id_ASC"
  | "nfl_feed_id_DESC"
  | "position_ASC"
  | "position_DESC"
  | "position_group_ASC"
  | "position_group_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TeamPlayerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TeamOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GameSeasonType = "PRE" | "REG";

export type FlipPosition = "QB" | "WR1" | "WR2" | "RB" | "TE";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type LeagueOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NflGameOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "week_ASC"
  | "week_DESC"
  | "season_ASC"
  | "season_DESC"
  | "nfl_feed_id_ASC"
  | "nfl_feed_id_DESC"
  | "nfl_feed_key_ASC"
  | "nfl_feed_key_DESC"
  | "start_ASC"
  | "start_DESC"
  | "season_type_ASC"
  | "season_type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NflTeamOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "city_ASC"
  | "city_DESC"
  | "code_ASC"
  | "code_DESC"
  | "full_name_ASC"
  | "full_name_DESC"
  | "name_ASC"
  | "name_DESC"
  | "nfl_feed_id_ASC"
  | "nfl_feed_id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface NflPlayerUpdateWithoutNfl_teamDataInput {
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: Int;
  position?: String;
  position_group?: String;
  status?: String;
  team_players?: TeamPlayerUpdateManyWithoutNfl_playerInput;
}

export type FlipGamePlayerWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface NflPlayerCreateWithoutNfl_teamInput {
  display_name: String;
  esb_id: String;
  first_name: String;
  gsis_id?: String;
  last_name: String;
  nfl_feed_id: Int;
  position: String;
  position_group: String;
  status: String;
  team_players?: TeamPlayerCreateManyWithoutNfl_playerInput;
}

export interface NflPlayerCreateWithoutTeam_playersInput {
  display_name: String;
  esb_id: String;
  first_name: String;
  gsis_id?: String;
  last_name: String;
  nfl_feed_id: Int;
  nfl_team: NflTeamCreateOneWithoutNfl_playersInput;
  position: String;
  position_group: String;
  status: String;
}

export interface TeamPlayerCreateManyWithoutNfl_playerInput {
  create?:
    | TeamPlayerCreateWithoutNfl_playerInput[]
    | TeamPlayerCreateWithoutNfl_playerInput;
  connect?: TeamPlayerWhereUniqueInput[] | TeamPlayerWhereUniqueInput;
}

export interface LeagueUpdateOneRequiredWithoutTeamsInput {
  create?: LeagueCreateWithoutTeamsInput;
  update?: LeagueUpdateWithoutTeamsDataInput;
  upsert?: LeagueUpsertWithoutTeamsInput;
  connect?: LeagueWhereUniqueInput;
}

export interface TeamPlayerCreateWithoutNfl_playerInput {
  team: TeamCreateOneWithoutTeam_playersInput;
}

export interface TeamSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TeamWhereInput;
  AND?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  OR?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  NOT?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
}

export interface TeamCreateOneWithoutTeam_playersInput {
  create?: TeamCreateWithoutTeam_playersInput;
  connect?: TeamWhereUniqueInput;
}

export interface TeamWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  league?: LeagueWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  team_players_every?: TeamPlayerWhereInput;
  team_players_some?: TeamPlayerWhereInput;
  team_players_none?: TeamPlayerWhereInput;
  AND?: TeamWhereInput[] | TeamWhereInput;
  OR?: TeamWhereInput[] | TeamWhereInput;
  NOT?: TeamWhereInput[] | TeamWhereInput;
}

export interface TeamCreateWithoutTeam_playersInput {
  league: LeagueCreateOneWithoutTeamsInput;
  name: String;
}

export interface TeamPlayerWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  nfl_player?: NflPlayerWhereInput;
  team?: TeamWhereInput;
  AND?: TeamPlayerWhereInput[] | TeamPlayerWhereInput;
  OR?: TeamPlayerWhereInput[] | TeamPlayerWhereInput;
  NOT?: TeamPlayerWhereInput[] | TeamPlayerWhereInput;
}

export interface LeagueCreateOneWithoutTeamsInput {
  create?: LeagueCreateWithoutTeamsInput;
  connect?: LeagueWhereUniqueInput;
}

export interface FlipGamePlayerWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  game?: NflGameWhereInput;
  team?: NflTeamWhereInput;
  position?: FlipPosition;
  position_not?: FlipPosition;
  position_in?: FlipPosition[] | FlipPosition;
  position_not_in?: FlipPosition[] | FlipPosition;
  player?: NflPlayerWhereInput;
  AND?: FlipGamePlayerWhereInput[] | FlipGamePlayerWhereInput;
  OR?: FlipGamePlayerWhereInput[] | FlipGamePlayerWhereInput;
  NOT?: FlipGamePlayerWhereInput[] | FlipGamePlayerWhereInput;
}

export interface LeagueCreateWithoutTeamsInput {
  name: String;
}

export interface NflPlayerWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  display_name?: String;
  display_name_not?: String;
  display_name_in?: String[] | String;
  display_name_not_in?: String[] | String;
  display_name_lt?: String;
  display_name_lte?: String;
  display_name_gt?: String;
  display_name_gte?: String;
  display_name_contains?: String;
  display_name_not_contains?: String;
  display_name_starts_with?: String;
  display_name_not_starts_with?: String;
  display_name_ends_with?: String;
  display_name_not_ends_with?: String;
  esb_id?: String;
  esb_id_not?: String;
  esb_id_in?: String[] | String;
  esb_id_not_in?: String[] | String;
  esb_id_lt?: String;
  esb_id_lte?: String;
  esb_id_gt?: String;
  esb_id_gte?: String;
  esb_id_contains?: String;
  esb_id_not_contains?: String;
  esb_id_starts_with?: String;
  esb_id_not_starts_with?: String;
  esb_id_ends_with?: String;
  esb_id_not_ends_with?: String;
  first_name?: String;
  first_name_not?: String;
  first_name_in?: String[] | String;
  first_name_not_in?: String[] | String;
  first_name_lt?: String;
  first_name_lte?: String;
  first_name_gt?: String;
  first_name_gte?: String;
  first_name_contains?: String;
  first_name_not_contains?: String;
  first_name_starts_with?: String;
  first_name_not_starts_with?: String;
  first_name_ends_with?: String;
  first_name_not_ends_with?: String;
  gsis_id?: String;
  gsis_id_not?: String;
  gsis_id_in?: String[] | String;
  gsis_id_not_in?: String[] | String;
  gsis_id_lt?: String;
  gsis_id_lte?: String;
  gsis_id_gt?: String;
  gsis_id_gte?: String;
  gsis_id_contains?: String;
  gsis_id_not_contains?: String;
  gsis_id_starts_with?: String;
  gsis_id_not_starts_with?: String;
  gsis_id_ends_with?: String;
  gsis_id_not_ends_with?: String;
  last_name?: String;
  last_name_not?: String;
  last_name_in?: String[] | String;
  last_name_not_in?: String[] | String;
  last_name_lt?: String;
  last_name_lte?: String;
  last_name_gt?: String;
  last_name_gte?: String;
  last_name_contains?: String;
  last_name_not_contains?: String;
  last_name_starts_with?: String;
  last_name_not_starts_with?: String;
  last_name_ends_with?: String;
  last_name_not_ends_with?: String;
  nfl_feed_id?: Int;
  nfl_feed_id_not?: Int;
  nfl_feed_id_in?: Int[] | Int;
  nfl_feed_id_not_in?: Int[] | Int;
  nfl_feed_id_lt?: Int;
  nfl_feed_id_lte?: Int;
  nfl_feed_id_gt?: Int;
  nfl_feed_id_gte?: Int;
  nfl_team?: NflTeamWhereInput;
  position?: String;
  position_not?: String;
  position_in?: String[] | String;
  position_not_in?: String[] | String;
  position_lt?: String;
  position_lte?: String;
  position_gt?: String;
  position_gte?: String;
  position_contains?: String;
  position_not_contains?: String;
  position_starts_with?: String;
  position_not_starts_with?: String;
  position_ends_with?: String;
  position_not_ends_with?: String;
  position_group?: String;
  position_group_not?: String;
  position_group_in?: String[] | String;
  position_group_not_in?: String[] | String;
  position_group_lt?: String;
  position_group_lte?: String;
  position_group_gt?: String;
  position_group_gte?: String;
  position_group_contains?: String;
  position_group_not_contains?: String;
  position_group_starts_with?: String;
  position_group_not_starts_with?: String;
  position_group_ends_with?: String;
  position_group_not_ends_with?: String;
  status?: String;
  status_not?: String;
  status_in?: String[] | String;
  status_not_in?: String[] | String;
  status_lt?: String;
  status_lte?: String;
  status_gt?: String;
  status_gte?: String;
  status_contains?: String;
  status_not_contains?: String;
  status_starts_with?: String;
  status_not_starts_with?: String;
  status_ends_with?: String;
  status_not_ends_with?: String;
  team_players_every?: TeamPlayerWhereInput;
  team_players_some?: TeamPlayerWhereInput;
  team_players_none?: TeamPlayerWhereInput;
  AND?: NflPlayerWhereInput[] | NflPlayerWhereInput;
  OR?: NflPlayerWhereInput[] | NflPlayerWhereInput;
  NOT?: NflPlayerWhereInput[] | NflPlayerWhereInput;
}

export interface NflPlayerCreateOneInput {
  create?: NflPlayerCreateInput;
  connect?: NflPlayerWhereUniqueInput;
}

export interface LeagueSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LeagueWhereInput;
  AND?: LeagueSubscriptionWhereInput[] | LeagueSubscriptionWhereInput;
  OR?: LeagueSubscriptionWhereInput[] | LeagueSubscriptionWhereInput;
  NOT?: LeagueSubscriptionWhereInput[] | LeagueSubscriptionWhereInput;
}

export interface NflPlayerCreateInput {
  display_name: String;
  esb_id: String;
  first_name: String;
  gsis_id?: String;
  last_name: String;
  nfl_feed_id: Int;
  nfl_team: NflTeamCreateOneWithoutNfl_playersInput;
  position: String;
  position_group: String;
  status: String;
  team_players?: TeamPlayerCreateManyWithoutNfl_playerInput;
}

export interface TeamPlayerUpdateInput {
  nfl_player?: NflPlayerUpdateOneRequiredWithoutTeam_playersInput;
  team?: TeamUpdateOneRequiredWithoutTeam_playersInput;
}

export interface NflTeamCreateOneWithoutNfl_playersInput {
  create?: NflTeamCreateWithoutNfl_playersInput;
  connect?: NflTeamWhereUniqueInput;
}

export type LeagueWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface NflTeamCreateWithoutNfl_playersInput {
  city: String;
  code: String;
  full_name: String;
  name: String;
  nfl_feed_id: String;
}

export interface TeamUpdateInput {
  league?: LeagueUpdateOneRequiredWithoutTeamsInput;
  name?: String;
  team_players?: TeamPlayerUpdateManyWithoutTeamInput;
}

export interface FlipGamePlayerUpdateInput {
  game?: NflGameUpdateOneRequiredInput;
  team?: NflTeamUpdateOneRequiredInput;
  position?: FlipPosition;
  player?: NflPlayerUpdateOneRequiredInput;
}

export interface NflTeamUpdateManyMutationInput {
  city?: String;
  code?: String;
  full_name?: String;
  name?: String;
  nfl_feed_id?: String;
}

export interface NflGameUpdateOneRequiredInput {
  create?: NflGameCreateInput;
  update?: NflGameUpdateDataInput;
  upsert?: NflGameUpsertNestedInput;
  connect?: NflGameWhereUniqueInput;
}

export interface NflTeamUpdateInput {
  city?: String;
  code?: String;
  full_name?: String;
  name?: String;
  nfl_feed_id?: String;
  nfl_players?: NflPlayerUpdateManyWithoutNfl_teamInput;
}

export interface NflGameUpdateDataInput {
  away_team?: NflTeamUpdateOneRequiredInput;
  home_team?: NflTeamUpdateOneRequiredInput;
  week?: Int;
  season?: Int;
  nfl_feed_id?: Int;
  nfl_feed_key?: Int;
  start?: DateTimeInput;
  season_type?: GameSeasonType;
}

export interface NflPlayerUpdateInput {
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: Int;
  nfl_team?: NflTeamUpdateOneRequiredWithoutNfl_playersInput;
  position?: String;
  position_group?: String;
  status?: String;
  team_players?: TeamPlayerUpdateManyWithoutNfl_playerInput;
}

export interface NflTeamUpdateOneRequiredInput {
  create?: NflTeamCreateInput;
  update?: NflTeamUpdateDataInput;
  upsert?: NflTeamUpsertNestedInput;
  connect?: NflTeamWhereUniqueInput;
}

export type NflPlayerWhereUniqueInput = AtLeastOne<{
  id: Int;
  nfl_feed_id?: Int;
}>;

export interface NflTeamUpdateDataInput {
  city?: String;
  code?: String;
  full_name?: String;
  name?: String;
  nfl_feed_id?: String;
  nfl_players?: NflPlayerUpdateManyWithoutNfl_teamInput;
}

export interface LeagueUpdateManyMutationInput {
  name?: String;
}

export interface NflPlayerUpdateManyWithoutNfl_teamInput {
  create?:
    | NflPlayerCreateWithoutNfl_teamInput[]
    | NflPlayerCreateWithoutNfl_teamInput;
  delete?: NflPlayerWhereUniqueInput[] | NflPlayerWhereUniqueInput;
  connect?: NflPlayerWhereUniqueInput[] | NflPlayerWhereUniqueInput;
  disconnect?: NflPlayerWhereUniqueInput[] | NflPlayerWhereUniqueInput;
  update?:
    | NflPlayerUpdateWithWhereUniqueWithoutNfl_teamInput[]
    | NflPlayerUpdateWithWhereUniqueWithoutNfl_teamInput;
  upsert?:
    | NflPlayerUpsertWithWhereUniqueWithoutNfl_teamInput[]
    | NflPlayerUpsertWithWhereUniqueWithoutNfl_teamInput;
  deleteMany?: NflPlayerScalarWhereInput[] | NflPlayerScalarWhereInput;
  updateMany?:
    | NflPlayerUpdateManyWithWhereNestedInput[]
    | NflPlayerUpdateManyWithWhereNestedInput;
}

export type NflTeamWhereUniqueInput = AtLeastOne<{
  id: Int;
  nfl_feed_id?: String;
}>;

export interface NflPlayerUpdateWithWhereUniqueWithoutNfl_teamInput {
  where: NflPlayerWhereUniqueInput;
  data: NflPlayerUpdateWithoutNfl_teamDataInput;
}

export interface TeamScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: TeamScalarWhereInput[] | TeamScalarWhereInput;
  OR?: TeamScalarWhereInput[] | TeamScalarWhereInput;
  NOT?: TeamScalarWhereInput[] | TeamScalarWhereInput;
}

export interface TeamUpdateWithWhereUniqueWithoutLeagueInput {
  where: TeamWhereUniqueInput;
  data: TeamUpdateWithoutLeagueDataInput;
}

export interface TeamPlayerUpsertWithWhereUniqueWithoutTeamInput {
  where: TeamPlayerWhereUniqueInput;
  update: TeamPlayerUpdateWithoutTeamDataInput;
  create: TeamPlayerCreateWithoutTeamInput;
}

export interface TeamPlayerUpdateManyWithoutNfl_playerInput {
  create?:
    | TeamPlayerCreateWithoutNfl_playerInput[]
    | TeamPlayerCreateWithoutNfl_playerInput;
  delete?: TeamPlayerWhereUniqueInput[] | TeamPlayerWhereUniqueInput;
  connect?: TeamPlayerWhereUniqueInput[] | TeamPlayerWhereUniqueInput;
  disconnect?: TeamPlayerWhereUniqueInput[] | TeamPlayerWhereUniqueInput;
  update?:
    | TeamPlayerUpdateWithWhereUniqueWithoutNfl_playerInput[]
    | TeamPlayerUpdateWithWhereUniqueWithoutNfl_playerInput;
  upsert?:
    | TeamPlayerUpsertWithWhereUniqueWithoutNfl_playerInput[]
    | TeamPlayerUpsertWithWhereUniqueWithoutNfl_playerInput;
  deleteMany?: TeamPlayerScalarWhereInput[] | TeamPlayerScalarWhereInput;
}

export interface NflPlayerUpsertWithoutTeam_playersInput {
  update: NflPlayerUpdateWithoutTeam_playersDataInput;
  create: NflPlayerCreateWithoutTeam_playersInput;
}

export interface TeamPlayerUpdateWithWhereUniqueWithoutNfl_playerInput {
  where: TeamPlayerWhereUniqueInput;
  data: TeamPlayerUpdateWithoutNfl_playerDataInput;
}

export interface NflPlayerUpdateOneRequiredWithoutTeam_playersInput {
  create?: NflPlayerCreateWithoutTeam_playersInput;
  update?: NflPlayerUpdateWithoutTeam_playersDataInput;
  upsert?: NflPlayerUpsertWithoutTeam_playersInput;
  connect?: NflPlayerWhereUniqueInput;
}

export interface TeamPlayerUpdateWithoutNfl_playerDataInput {
  team?: TeamUpdateOneRequiredWithoutTeam_playersInput;
}

export interface TeamPlayerUpdateWithoutTeamDataInput {
  nfl_player?: NflPlayerUpdateOneRequiredWithoutTeam_playersInput;
}

export interface TeamUpdateOneRequiredWithoutTeam_playersInput {
  create?: TeamCreateWithoutTeam_playersInput;
  update?: TeamUpdateWithoutTeam_playersDataInput;
  upsert?: TeamUpsertWithoutTeam_playersInput;
  connect?: TeamWhereUniqueInput;
}

export interface TeamPlayerUpdateManyWithoutTeamInput {
  create?:
    | TeamPlayerCreateWithoutTeamInput[]
    | TeamPlayerCreateWithoutTeamInput;
  delete?: TeamPlayerWhereUniqueInput[] | TeamPlayerWhereUniqueInput;
  connect?: TeamPlayerWhereUniqueInput[] | TeamPlayerWhereUniqueInput;
  disconnect?: TeamPlayerWhereUniqueInput[] | TeamPlayerWhereUniqueInput;
  update?:
    | TeamPlayerUpdateWithWhereUniqueWithoutTeamInput[]
    | TeamPlayerUpdateWithWhereUniqueWithoutTeamInput;
  upsert?:
    | TeamPlayerUpsertWithWhereUniqueWithoutTeamInput[]
    | TeamPlayerUpsertWithWhereUniqueWithoutTeamInput;
  deleteMany?: TeamPlayerScalarWhereInput[] | TeamPlayerScalarWhereInput;
}

export interface TeamUpdateWithoutTeam_playersDataInput {
  league?: LeagueUpdateOneRequiredWithoutTeamsInput;
  name?: String;
}

export interface NflGameCreateOneInput {
  create?: NflGameCreateInput;
  connect?: NflGameWhereUniqueInput;
}

export interface LeagueWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  teams_every?: TeamWhereInput;
  teams_some?: TeamWhereInput;
  teams_none?: TeamWhereInput;
  AND?: LeagueWhereInput[] | LeagueWhereInput;
  OR?: LeagueWhereInput[] | LeagueWhereInput;
  NOT?: LeagueWhereInput[] | LeagueWhereInput;
}

export interface NflTeamCreateOneInput {
  create?: NflTeamCreateInput;
  connect?: NflTeamWhereUniqueInput;
}

export interface LeagueUpdateWithoutTeamsDataInput {
  name?: String;
}

export interface NflPlayerCreateManyWithoutNfl_teamInput {
  create?:
    | NflPlayerCreateWithoutNfl_teamInput[]
    | NflPlayerCreateWithoutNfl_teamInput;
  connect?: NflPlayerWhereUniqueInput[] | NflPlayerWhereUniqueInput;
}

export interface LeagueUpsertWithoutTeamsInput {
  update: LeagueUpdateWithoutTeamsDataInput;
  create: LeagueCreateWithoutTeamsInput;
}

export interface NflTeamSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NflTeamWhereInput;
  AND?: NflTeamSubscriptionWhereInput[] | NflTeamSubscriptionWhereInput;
  OR?: NflTeamSubscriptionWhereInput[] | NflTeamSubscriptionWhereInput;
  NOT?: NflTeamSubscriptionWhereInput[] | NflTeamSubscriptionWhereInput;
}

export interface TeamUpsertWithoutTeam_playersInput {
  update: TeamUpdateWithoutTeam_playersDataInput;
  create: TeamCreateWithoutTeam_playersInput;
}

export interface NflTeamWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  full_name?: String;
  full_name_not?: String;
  full_name_in?: String[] | String;
  full_name_not_in?: String[] | String;
  full_name_lt?: String;
  full_name_lte?: String;
  full_name_gt?: String;
  full_name_gte?: String;
  full_name_contains?: String;
  full_name_not_contains?: String;
  full_name_starts_with?: String;
  full_name_not_starts_with?: String;
  full_name_ends_with?: String;
  full_name_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  nfl_feed_id?: String;
  nfl_feed_id_not?: String;
  nfl_feed_id_in?: String[] | String;
  nfl_feed_id_not_in?: String[] | String;
  nfl_feed_id_lt?: String;
  nfl_feed_id_lte?: String;
  nfl_feed_id_gt?: String;
  nfl_feed_id_gte?: String;
  nfl_feed_id_contains?: String;
  nfl_feed_id_not_contains?: String;
  nfl_feed_id_starts_with?: String;
  nfl_feed_id_not_starts_with?: String;
  nfl_feed_id_ends_with?: String;
  nfl_feed_id_not_ends_with?: String;
  nfl_players_every?: NflPlayerWhereInput;
  nfl_players_some?: NflPlayerWhereInput;
  nfl_players_none?: NflPlayerWhereInput;
  AND?: NflTeamWhereInput[] | NflTeamWhereInput;
  OR?: NflTeamWhereInput[] | NflTeamWhereInput;
  NOT?: NflTeamWhereInput[] | NflTeamWhereInput;
}

export interface TeamPlayerUpsertWithWhereUniqueWithoutNfl_playerInput {
  where: TeamPlayerWhereUniqueInput;
  update: TeamPlayerUpdateWithoutNfl_playerDataInput;
  create: TeamPlayerCreateWithoutNfl_playerInput;
}

export interface NflGameSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NflGameWhereInput;
  AND?: NflGameSubscriptionWhereInput[] | NflGameSubscriptionWhereInput;
  OR?: NflGameSubscriptionWhereInput[] | NflGameSubscriptionWhereInput;
  NOT?: NflGameSubscriptionWhereInput[] | NflGameSubscriptionWhereInput;
}

export interface TeamPlayerScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  AND?: TeamPlayerScalarWhereInput[] | TeamPlayerScalarWhereInput;
  OR?: TeamPlayerScalarWhereInput[] | TeamPlayerScalarWhereInput;
  NOT?: TeamPlayerScalarWhereInput[] | TeamPlayerScalarWhereInput;
}

export interface TeamPlayerCreateInput {
  nfl_player: NflPlayerCreateOneWithoutTeam_playersInput;
  team: TeamCreateOneWithoutTeam_playersInput;
}

export interface NflPlayerUpsertWithWhereUniqueWithoutNfl_teamInput {
  where: NflPlayerWhereUniqueInput;
  update: NflPlayerUpdateWithoutNfl_teamDataInput;
  create: NflPlayerCreateWithoutNfl_teamInput;
}

export interface TeamCreateInput {
  league: LeagueCreateOneWithoutTeamsInput;
  name: String;
  team_players?: TeamPlayerCreateManyWithoutTeamInput;
}

export interface NflPlayerScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  display_name?: String;
  display_name_not?: String;
  display_name_in?: String[] | String;
  display_name_not_in?: String[] | String;
  display_name_lt?: String;
  display_name_lte?: String;
  display_name_gt?: String;
  display_name_gte?: String;
  display_name_contains?: String;
  display_name_not_contains?: String;
  display_name_starts_with?: String;
  display_name_not_starts_with?: String;
  display_name_ends_with?: String;
  display_name_not_ends_with?: String;
  esb_id?: String;
  esb_id_not?: String;
  esb_id_in?: String[] | String;
  esb_id_not_in?: String[] | String;
  esb_id_lt?: String;
  esb_id_lte?: String;
  esb_id_gt?: String;
  esb_id_gte?: String;
  esb_id_contains?: String;
  esb_id_not_contains?: String;
  esb_id_starts_with?: String;
  esb_id_not_starts_with?: String;
  esb_id_ends_with?: String;
  esb_id_not_ends_with?: String;
  first_name?: String;
  first_name_not?: String;
  first_name_in?: String[] | String;
  first_name_not_in?: String[] | String;
  first_name_lt?: String;
  first_name_lte?: String;
  first_name_gt?: String;
  first_name_gte?: String;
  first_name_contains?: String;
  first_name_not_contains?: String;
  first_name_starts_with?: String;
  first_name_not_starts_with?: String;
  first_name_ends_with?: String;
  first_name_not_ends_with?: String;
  gsis_id?: String;
  gsis_id_not?: String;
  gsis_id_in?: String[] | String;
  gsis_id_not_in?: String[] | String;
  gsis_id_lt?: String;
  gsis_id_lte?: String;
  gsis_id_gt?: String;
  gsis_id_gte?: String;
  gsis_id_contains?: String;
  gsis_id_not_contains?: String;
  gsis_id_starts_with?: String;
  gsis_id_not_starts_with?: String;
  gsis_id_ends_with?: String;
  gsis_id_not_ends_with?: String;
  last_name?: String;
  last_name_not?: String;
  last_name_in?: String[] | String;
  last_name_not_in?: String[] | String;
  last_name_lt?: String;
  last_name_lte?: String;
  last_name_gt?: String;
  last_name_gte?: String;
  last_name_contains?: String;
  last_name_not_contains?: String;
  last_name_starts_with?: String;
  last_name_not_starts_with?: String;
  last_name_ends_with?: String;
  last_name_not_ends_with?: String;
  nfl_feed_id?: Int;
  nfl_feed_id_not?: Int;
  nfl_feed_id_in?: Int[] | Int;
  nfl_feed_id_not_in?: Int[] | Int;
  nfl_feed_id_lt?: Int;
  nfl_feed_id_lte?: Int;
  nfl_feed_id_gt?: Int;
  nfl_feed_id_gte?: Int;
  position?: String;
  position_not?: String;
  position_in?: String[] | String;
  position_not_in?: String[] | String;
  position_lt?: String;
  position_lte?: String;
  position_gt?: String;
  position_gte?: String;
  position_contains?: String;
  position_not_contains?: String;
  position_starts_with?: String;
  position_not_starts_with?: String;
  position_ends_with?: String;
  position_not_ends_with?: String;
  position_group?: String;
  position_group_not?: String;
  position_group_in?: String[] | String;
  position_group_not_in?: String[] | String;
  position_group_lt?: String;
  position_group_lte?: String;
  position_group_gt?: String;
  position_group_gte?: String;
  position_group_contains?: String;
  position_group_not_contains?: String;
  position_group_starts_with?: String;
  position_group_not_starts_with?: String;
  position_group_ends_with?: String;
  position_group_not_ends_with?: String;
  status?: String;
  status_not?: String;
  status_in?: String[] | String;
  status_not_in?: String[] | String;
  status_lt?: String;
  status_lte?: String;
  status_gt?: String;
  status_gte?: String;
  status_contains?: String;
  status_not_contains?: String;
  status_starts_with?: String;
  status_not_starts_with?: String;
  status_ends_with?: String;
  status_not_ends_with?: String;
  AND?: NflPlayerScalarWhereInput[] | NflPlayerScalarWhereInput;
  OR?: NflPlayerScalarWhereInput[] | NflPlayerScalarWhereInput;
  NOT?: NflPlayerScalarWhereInput[] | NflPlayerScalarWhereInput;
}

export interface NflPlayerUpdateManyMutationInput {
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: Int;
  position?: String;
  position_group?: String;
  status?: String;
}

export interface NflPlayerUpdateManyWithWhereNestedInput {
  where: NflPlayerScalarWhereInput;
  data: NflPlayerUpdateManyDataInput;
}

export interface NflGameUpdateInput {
  away_team?: NflTeamUpdateOneRequiredInput;
  home_team?: NflTeamUpdateOneRequiredInput;
  week?: Int;
  season?: Int;
  nfl_feed_id?: Int;
  nfl_feed_key?: Int;
  start?: DateTimeInput;
  season_type?: GameSeasonType;
}

export interface NflPlayerUpdateManyDataInput {
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: Int;
  position?: String;
  position_group?: String;
  status?: String;
}

export interface TeamUpdateManyWithWhereNestedInput {
  where: TeamScalarWhereInput;
  data: TeamUpdateManyDataInput;
}

export interface NflTeamUpsertNestedInput {
  update: NflTeamUpdateDataInput;
  create: NflTeamCreateInput;
}

export type TeamWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface NflGameUpsertNestedInput {
  update: NflGameUpdateDataInput;
  create: NflGameCreateInput;
}

export type TeamPlayerWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface NflPlayerUpdateOneRequiredInput {
  create?: NflPlayerCreateInput;
  update?: NflPlayerUpdateDataInput;
  upsert?: NflPlayerUpsertNestedInput;
  connect?: NflPlayerWhereUniqueInput;
}

export interface TeamUpdateWithoutLeagueDataInput {
  name?: String;
  team_players?: TeamPlayerUpdateManyWithoutTeamInput;
}

export interface NflPlayerUpdateDataInput {
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: Int;
  nfl_team?: NflTeamUpdateOneRequiredWithoutNfl_playersInput;
  position?: String;
  position_group?: String;
  status?: String;
  team_players?: TeamPlayerUpdateManyWithoutNfl_playerInput;
}

export interface NflGameCreateInput {
  away_team: NflTeamCreateOneInput;
  home_team: NflTeamCreateOneInput;
  week: Int;
  season: Int;
  nfl_feed_id: Int;
  nfl_feed_key: Int;
  start: DateTimeInput;
  season_type: GameSeasonType;
}

export interface NflTeamUpdateOneRequiredWithoutNfl_playersInput {
  create?: NflTeamCreateWithoutNfl_playersInput;
  update?: NflTeamUpdateWithoutNfl_playersDataInput;
  upsert?: NflTeamUpsertWithoutNfl_playersInput;
  connect?: NflTeamWhereUniqueInput;
}

export interface TeamPlayerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TeamPlayerWhereInput;
  AND?: TeamPlayerSubscriptionWhereInput[] | TeamPlayerSubscriptionWhereInput;
  OR?: TeamPlayerSubscriptionWhereInput[] | TeamPlayerSubscriptionWhereInput;
  NOT?: TeamPlayerSubscriptionWhereInput[] | TeamPlayerSubscriptionWhereInput;
}

export interface NflTeamUpdateWithoutNfl_playersDataInput {
  city?: String;
  code?: String;
  full_name?: String;
  name?: String;
  nfl_feed_id?: String;
}

export interface NflGameWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  away_team?: NflTeamWhereInput;
  home_team?: NflTeamWhereInput;
  week?: Int;
  week_not?: Int;
  week_in?: Int[] | Int;
  week_not_in?: Int[] | Int;
  week_lt?: Int;
  week_lte?: Int;
  week_gt?: Int;
  week_gte?: Int;
  season?: Int;
  season_not?: Int;
  season_in?: Int[] | Int;
  season_not_in?: Int[] | Int;
  season_lt?: Int;
  season_lte?: Int;
  season_gt?: Int;
  season_gte?: Int;
  nfl_feed_id?: Int;
  nfl_feed_id_not?: Int;
  nfl_feed_id_in?: Int[] | Int;
  nfl_feed_id_not_in?: Int[] | Int;
  nfl_feed_id_lt?: Int;
  nfl_feed_id_lte?: Int;
  nfl_feed_id_gt?: Int;
  nfl_feed_id_gte?: Int;
  nfl_feed_key?: Int;
  nfl_feed_key_not?: Int;
  nfl_feed_key_in?: Int[] | Int;
  nfl_feed_key_not_in?: Int[] | Int;
  nfl_feed_key_lt?: Int;
  nfl_feed_key_lte?: Int;
  nfl_feed_key_gt?: Int;
  nfl_feed_key_gte?: Int;
  start?: DateTimeInput;
  start_not?: DateTimeInput;
  start_in?: DateTimeInput[] | DateTimeInput;
  start_not_in?: DateTimeInput[] | DateTimeInput;
  start_lt?: DateTimeInput;
  start_lte?: DateTimeInput;
  start_gt?: DateTimeInput;
  start_gte?: DateTimeInput;
  season_type?: GameSeasonType;
  season_type_not?: GameSeasonType;
  season_type_in?: GameSeasonType[] | GameSeasonType;
  season_type_not_in?: GameSeasonType[] | GameSeasonType;
  AND?: NflGameWhereInput[] | NflGameWhereInput;
  OR?: NflGameWhereInput[] | NflGameWhereInput;
  NOT?: NflGameWhereInput[] | NflGameWhereInput;
}

export interface NflTeamUpsertWithoutNfl_playersInput {
  update: NflTeamUpdateWithoutNfl_playersDataInput;
  create: NflTeamCreateWithoutNfl_playersInput;
}

export interface TeamUpdateManyMutationInput {
  name?: String;
}

export interface NflPlayerUpsertNestedInput {
  update: NflPlayerUpdateDataInput;
  create: NflPlayerCreateInput;
}

export interface NflGameUpdateManyMutationInput {
  week?: Int;
  season?: Int;
  nfl_feed_id?: Int;
  nfl_feed_key?: Int;
  start?: DateTimeInput;
  season_type?: GameSeasonType;
}

export interface FlipGamePlayerUpdateManyMutationInput {
  position?: FlipPosition;
}

export interface TeamUpsertWithWhereUniqueWithoutLeagueInput {
  where: TeamWhereUniqueInput;
  update: TeamUpdateWithoutLeagueDataInput;
  create: TeamCreateWithoutLeagueInput;
}

export interface TeamUpdateManyWithoutLeagueInput {
  create?: TeamCreateWithoutLeagueInput[] | TeamCreateWithoutLeagueInput;
  delete?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  connect?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  disconnect?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  update?:
    | TeamUpdateWithWhereUniqueWithoutLeagueInput[]
    | TeamUpdateWithWhereUniqueWithoutLeagueInput;
  upsert?:
    | TeamUpsertWithWhereUniqueWithoutLeagueInput[]
    | TeamUpsertWithWhereUniqueWithoutLeagueInput;
  deleteMany?: TeamScalarWhereInput[] | TeamScalarWhereInput;
  updateMany?:
    | TeamUpdateManyWithWhereNestedInput[]
    | TeamUpdateManyWithWhereNestedInput;
}

export interface TeamPlayerUpdateWithWhereUniqueWithoutTeamInput {
  where: TeamPlayerWhereUniqueInput;
  data: TeamPlayerUpdateWithoutTeamDataInput;
}

export interface LeagueUpdateInput {
  name?: String;
  teams?: TeamUpdateManyWithoutLeagueInput;
}

export interface NflTeamCreateInput {
  city: String;
  code: String;
  full_name: String;
  name: String;
  nfl_feed_id: String;
  nfl_players?: NflPlayerCreateManyWithoutNfl_teamInput;
}

export interface LeagueCreateInput {
  name: String;
  teams?: TeamCreateManyWithoutLeagueInput;
}

export interface FlipGamePlayerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FlipGamePlayerWhereInput;
  AND?:
    | FlipGamePlayerSubscriptionWhereInput[]
    | FlipGamePlayerSubscriptionWhereInput;
  OR?:
    | FlipGamePlayerSubscriptionWhereInput[]
    | FlipGamePlayerSubscriptionWhereInput;
  NOT?:
    | FlipGamePlayerSubscriptionWhereInput[]
    | FlipGamePlayerSubscriptionWhereInput;
}

export interface TeamCreateManyWithoutLeagueInput {
  create?: TeamCreateWithoutLeagueInput[] | TeamCreateWithoutLeagueInput;
  connect?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
}

export interface TeamUpdateManyDataInput {
  name?: String;
}

export interface NflPlayerCreateOneWithoutTeam_playersInput {
  create?: NflPlayerCreateWithoutTeam_playersInput;
  connect?: NflPlayerWhereUniqueInput;
}

export interface TeamPlayerCreateWithoutTeamInput {
  nfl_player: NflPlayerCreateOneWithoutTeam_playersInput;
}

export interface TeamPlayerCreateManyWithoutTeamInput {
  create?:
    | TeamPlayerCreateWithoutTeamInput[]
    | TeamPlayerCreateWithoutTeamInput;
  connect?: TeamPlayerWhereUniqueInput[] | TeamPlayerWhereUniqueInput;
}

export interface TeamCreateWithoutLeagueInput {
  name: String;
  team_players?: TeamPlayerCreateManyWithoutTeamInput;
}

export interface NflPlayerUpdateWithoutTeam_playersDataInput {
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: Int;
  nfl_team?: NflTeamUpdateOneRequiredWithoutNfl_playersInput;
  position?: String;
  position_group?: String;
  status?: String;
}

export type NflGameWhereUniqueInput = AtLeastOne<{
  id: Int;
  nfl_feed_id?: Int;
  nfl_feed_key?: Int;
}>;

export interface NflPlayerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NflPlayerWhereInput;
  AND?: NflPlayerSubscriptionWhereInput[] | NflPlayerSubscriptionWhereInput;
  OR?: NflPlayerSubscriptionWhereInput[] | NflPlayerSubscriptionWhereInput;
  NOT?: NflPlayerSubscriptionWhereInput[] | NflPlayerSubscriptionWhereInput;
}

export interface FlipGamePlayerCreateInput {
  game: NflGameCreateOneInput;
  team: NflTeamCreateOneInput;
  position: FlipPosition;
  player: NflPlayerCreateOneInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface TeamPlayerPreviousValues {
  id: Int;
}

export interface TeamPlayerPreviousValuesPromise
  extends Promise<TeamPlayerPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
}

export interface TeamPlayerPreviousValuesSubscription
  extends Promise<AsyncIterator<TeamPlayerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
}

export interface LeagueEdge {
  cursor: String;
}

export interface LeagueEdgePromise extends Promise<LeagueEdge>, Fragmentable {
  node: <T = LeaguePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LeagueEdgeSubscription
  extends Promise<AsyncIterator<LeagueEdge>>,
    Fragmentable {
  node: <T = LeagueSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Team {
  id: Int;
  name: String;
}

export interface TeamPromise extends Promise<Team>, Fragmentable {
  id: () => Promise<Int>;
  league: <T = LeaguePromise>() => T;
  name: () => Promise<String>;
  team_players: <T = FragmentableArray<TeamPlayer>>(
    args?: {
      where?: TeamPlayerWhereInput;
      orderBy?: TeamPlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TeamSubscription
  extends Promise<AsyncIterator<Team>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  league: <T = LeagueSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  team_players: <T = Promise<AsyncIterator<TeamPlayerSubscription>>>(
    args?: {
      where?: TeamPlayerWhereInput;
      orderBy?: TeamPlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface LeagueConnection {}

export interface LeagueConnectionPromise
  extends Promise<LeagueConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LeagueEdge>>() => T;
  aggregate: <T = AggregateLeaguePromise>() => T;
}

export interface LeagueConnectionSubscription
  extends Promise<AsyncIterator<LeagueConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LeagueEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLeagueSubscription>() => T;
}

export interface NflPlayer {
  id: Int;
  display_name: String;
  esb_id: String;
  first_name: String;
  gsis_id?: String;
  last_name: String;
  nfl_feed_id: Int;
  position: String;
  position_group: String;
  status: String;
}

export interface NflPlayerPromise extends Promise<NflPlayer>, Fragmentable {
  id: () => Promise<Int>;
  display_name: () => Promise<String>;
  esb_id: () => Promise<String>;
  first_name: () => Promise<String>;
  gsis_id: () => Promise<String>;
  last_name: () => Promise<String>;
  nfl_feed_id: () => Promise<Int>;
  nfl_team: <T = NflTeamPromise>() => T;
  position: () => Promise<String>;
  position_group: () => Promise<String>;
  status: () => Promise<String>;
  team_players: <T = FragmentableArray<TeamPlayer>>(
    args?: {
      where?: TeamPlayerWhereInput;
      orderBy?: TeamPlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface NflPlayerSubscription
  extends Promise<AsyncIterator<NflPlayer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  display_name: () => Promise<AsyncIterator<String>>;
  esb_id: () => Promise<AsyncIterator<String>>;
  first_name: () => Promise<AsyncIterator<String>>;
  gsis_id: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  nfl_feed_id: () => Promise<AsyncIterator<Int>>;
  nfl_team: <T = NflTeamSubscription>() => T;
  position: () => Promise<AsyncIterator<String>>;
  position_group: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  team_players: <T = Promise<AsyncIterator<TeamPlayerSubscription>>>(
    args?: {
      where?: TeamPlayerWhereInput;
      orderBy?: TeamPlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface TeamPlayer {
  id: Int;
}

export interface TeamPlayerPromise extends Promise<TeamPlayer>, Fragmentable {
  id: () => Promise<Int>;
  nfl_player: <T = NflPlayerPromise>() => T;
  team: <T = TeamPromise>() => T;
}

export interface TeamPlayerSubscription
  extends Promise<AsyncIterator<TeamPlayer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  nfl_player: <T = NflPlayerSubscription>() => T;
  team: <T = TeamSubscription>() => T;
}

export interface AggregateFlipGamePlayer {
  count: Int;
}

export interface AggregateFlipGamePlayerPromise
  extends Promise<AggregateFlipGamePlayer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFlipGamePlayerSubscription
  extends Promise<AsyncIterator<AggregateFlipGamePlayer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TeamPlayerEdge {
  cursor: String;
}

export interface TeamPlayerEdgePromise
  extends Promise<TeamPlayerEdge>,
    Fragmentable {
  node: <T = TeamPlayerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TeamPlayerEdgeSubscription
  extends Promise<AsyncIterator<TeamPlayerEdge>>,
    Fragmentable {
  node: <T = TeamPlayerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FlipGamePlayerEdge {
  cursor: String;
}

export interface FlipGamePlayerEdgePromise
  extends Promise<FlipGamePlayerEdge>,
    Fragmentable {
  node: <T = FlipGamePlayerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FlipGamePlayerEdgeSubscription
  extends Promise<AsyncIterator<FlipGamePlayerEdge>>,
    Fragmentable {
  node: <T = FlipGamePlayerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTeam {
  count: Int;
}

export interface AggregateTeamPromise
  extends Promise<AggregateTeam>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTeamSubscription
  extends Promise<AsyncIterator<AggregateTeam>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TeamPreviousValues {
  id: Int;
  name: String;
}

export interface TeamPreviousValuesPromise
  extends Promise<TeamPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface TeamPreviousValuesSubscription
  extends Promise<AsyncIterator<TeamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface TeamConnection {}

export interface TeamConnectionPromise
  extends Promise<TeamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TeamEdge>>() => T;
  aggregate: <T = AggregateTeamPromise>() => T;
}

export interface TeamConnectionSubscription
  extends Promise<AsyncIterator<TeamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TeamEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTeamSubscription>() => T;
}

export interface FlipGamePlayer {
  id: Int;
  position: FlipPosition;
}

export interface FlipGamePlayerPromise
  extends Promise<FlipGamePlayer>,
    Fragmentable {
  id: () => Promise<Int>;
  game: <T = NflGamePromise>() => T;
  team: <T = NflTeamPromise>() => T;
  position: () => Promise<FlipPosition>;
  player: <T = NflPlayerPromise>() => T;
}

export interface FlipGamePlayerSubscription
  extends Promise<AsyncIterator<FlipGamePlayer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  game: <T = NflGameSubscription>() => T;
  team: <T = NflTeamSubscription>() => T;
  position: () => Promise<AsyncIterator<FlipPosition>>;
  player: <T = NflPlayerSubscription>() => T;
}

export interface NflTeamEdge {
  cursor: String;
}

export interface NflTeamEdgePromise extends Promise<NflTeamEdge>, Fragmentable {
  node: <T = NflTeamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NflTeamEdgeSubscription
  extends Promise<AsyncIterator<NflTeamEdge>>,
    Fragmentable {
  node: <T = NflTeamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FlipGamePlayerSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface FlipGamePlayerSubscriptionPayloadPromise
  extends Promise<FlipGamePlayerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FlipGamePlayerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FlipGamePlayerPreviousValuesPromise>() => T;
}

export interface FlipGamePlayerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FlipGamePlayerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FlipGamePlayerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FlipGamePlayerPreviousValuesSubscription>() => T;
}

export interface NflGame {
  id: Int;
  week: Int;
  season: Int;
  nfl_feed_id: Int;
  nfl_feed_key: Int;
  start: DateTimeOutput;
  season_type: GameSeasonType;
}

export interface NflGamePromise extends Promise<NflGame>, Fragmentable {
  id: () => Promise<Int>;
  away_team: <T = NflTeamPromise>() => T;
  home_team: <T = NflTeamPromise>() => T;
  week: () => Promise<Int>;
  season: () => Promise<Int>;
  nfl_feed_id: () => Promise<Int>;
  nfl_feed_key: () => Promise<Int>;
  start: () => Promise<DateTimeOutput>;
  season_type: () => Promise<GameSeasonType>;
}

export interface NflGameSubscription
  extends Promise<AsyncIterator<NflGame>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  away_team: <T = NflTeamSubscription>() => T;
  home_team: <T = NflTeamSubscription>() => T;
  week: () => Promise<AsyncIterator<Int>>;
  season: () => Promise<AsyncIterator<Int>>;
  nfl_feed_id: () => Promise<AsyncIterator<Int>>;
  nfl_feed_key: () => Promise<AsyncIterator<Int>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  season_type: () => Promise<AsyncIterator<GameSeasonType>>;
}

export interface FlipGamePlayerPreviousValues {
  id: Int;
  position: FlipPosition;
}

export interface FlipGamePlayerPreviousValuesPromise
  extends Promise<FlipGamePlayerPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  position: () => Promise<FlipPosition>;
}

export interface FlipGamePlayerPreviousValuesSubscription
  extends Promise<AsyncIterator<FlipGamePlayerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  position: () => Promise<AsyncIterator<FlipPosition>>;
}

export interface NflPlayerEdge {
  cursor: String;
}

export interface NflPlayerEdgePromise
  extends Promise<NflPlayerEdge>,
    Fragmentable {
  node: <T = NflPlayerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NflPlayerEdgeSubscription
  extends Promise<AsyncIterator<NflPlayerEdge>>,
    Fragmentable {
  node: <T = NflPlayerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNflGame {
  count: Int;
}

export interface AggregateNflGamePromise
  extends Promise<AggregateNflGame>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNflGameSubscription
  extends Promise<AsyncIterator<AggregateNflGame>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LeagueSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LeagueSubscriptionPayloadPromise
  extends Promise<LeagueSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LeaguePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LeaguePreviousValuesPromise>() => T;
}

export interface LeagueSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LeagueSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LeagueSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LeaguePreviousValuesSubscription>() => T;
}

export interface NflGameConnection {}

export interface NflGameConnectionPromise
  extends Promise<NflGameConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NflGameEdge>>() => T;
  aggregate: <T = AggregateNflGamePromise>() => T;
}

export interface NflGameConnectionSubscription
  extends Promise<AsyncIterator<NflGameConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NflGameEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNflGameSubscription>() => T;
}

export interface LeaguePreviousValues {
  id: Int;
  name: String;
}

export interface LeaguePreviousValuesPromise
  extends Promise<LeaguePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface LeaguePreviousValuesSubscription
  extends Promise<AsyncIterator<LeaguePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLeague {
  count: Int;
}

export interface AggregateLeaguePromise
  extends Promise<AggregateLeague>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLeagueSubscription
  extends Promise<AsyncIterator<AggregateLeague>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FlipGamePlayerConnection {}

export interface FlipGamePlayerConnectionPromise
  extends Promise<FlipGamePlayerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FlipGamePlayerEdge>>() => T;
  aggregate: <T = AggregateFlipGamePlayerPromise>() => T;
}

export interface FlipGamePlayerConnectionSubscription
  extends Promise<AsyncIterator<FlipGamePlayerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FlipGamePlayerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFlipGamePlayerSubscription>() => T;
}

export interface AggregateTeamPlayer {
  count: Int;
}

export interface AggregateTeamPlayerPromise
  extends Promise<AggregateTeamPlayer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTeamPlayerSubscription
  extends Promise<AsyncIterator<AggregateTeamPlayer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NflGameSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface NflGameSubscriptionPayloadPromise
  extends Promise<NflGameSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NflGamePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NflGamePreviousValuesPromise>() => T;
}

export interface NflGameSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NflGameSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NflGameSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NflGamePreviousValuesSubscription>() => T;
}

export interface TeamEdge {
  cursor: String;
}

export interface TeamEdgePromise extends Promise<TeamEdge>, Fragmentable {
  node: <T = TeamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TeamEdgeSubscription
  extends Promise<AsyncIterator<TeamEdge>>,
    Fragmentable {
  node: <T = TeamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NflGamePreviousValues {
  id: Int;
  week: Int;
  season: Int;
  nfl_feed_id: Int;
  nfl_feed_key: Int;
  start: DateTimeOutput;
  season_type: GameSeasonType;
}

export interface NflGamePreviousValuesPromise
  extends Promise<NflGamePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  week: () => Promise<Int>;
  season: () => Promise<Int>;
  nfl_feed_id: () => Promise<Int>;
  nfl_feed_key: () => Promise<Int>;
  start: () => Promise<DateTimeOutput>;
  season_type: () => Promise<GameSeasonType>;
}

export interface NflGamePreviousValuesSubscription
  extends Promise<AsyncIterator<NflGamePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  week: () => Promise<AsyncIterator<Int>>;
  season: () => Promise<AsyncIterator<Int>>;
  nfl_feed_id: () => Promise<AsyncIterator<Int>>;
  nfl_feed_key: () => Promise<AsyncIterator<Int>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  season_type: () => Promise<AsyncIterator<GameSeasonType>>;
}

export interface NflTeamConnection {}

export interface NflTeamConnectionPromise
  extends Promise<NflTeamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NflTeamEdge>>() => T;
  aggregate: <T = AggregateNflTeamPromise>() => T;
}

export interface NflTeamConnectionSubscription
  extends Promise<AsyncIterator<NflTeamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NflTeamEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNflTeamSubscription>() => T;
}

export interface TeamSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface TeamSubscriptionPayloadPromise
  extends Promise<TeamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TeamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TeamPreviousValuesPromise>() => T;
}

export interface TeamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TeamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TeamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TeamPreviousValuesSubscription>() => T;
}

export interface NflPlayerConnection {}

export interface NflPlayerConnectionPromise
  extends Promise<NflPlayerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NflPlayerEdge>>() => T;
  aggregate: <T = AggregateNflPlayerPromise>() => T;
}

export interface NflPlayerConnectionSubscription
  extends Promise<AsyncIterator<NflPlayerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NflPlayerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNflPlayerSubscription>() => T;
}

export interface NflPlayerSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface NflPlayerSubscriptionPayloadPromise
  extends Promise<NflPlayerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NflPlayerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NflPlayerPreviousValuesPromise>() => T;
}

export interface NflPlayerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NflPlayerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NflPlayerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NflPlayerPreviousValuesSubscription>() => T;
}

export interface NflTeam {
  id: Int;
  city: String;
  code: String;
  full_name: String;
  name: String;
  nfl_feed_id: String;
}

export interface NflTeamPromise extends Promise<NflTeam>, Fragmentable {
  id: () => Promise<Int>;
  city: () => Promise<String>;
  code: () => Promise<String>;
  full_name: () => Promise<String>;
  name: () => Promise<String>;
  nfl_feed_id: () => Promise<String>;
  nfl_players: <T = FragmentableArray<NflPlayer>>(
    args?: {
      where?: NflPlayerWhereInput;
      orderBy?: NflPlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface NflTeamSubscription
  extends Promise<AsyncIterator<NflTeam>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  city: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  full_name: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  nfl_feed_id: () => Promise<AsyncIterator<String>>;
  nfl_players: <T = Promise<AsyncIterator<NflPlayerSubscription>>>(
    args?: {
      where?: NflPlayerWhereInput;
      orderBy?: NflPlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TeamPlayerConnection {}

export interface TeamPlayerConnectionPromise
  extends Promise<TeamPlayerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TeamPlayerEdge>>() => T;
  aggregate: <T = AggregateTeamPlayerPromise>() => T;
}

export interface TeamPlayerConnectionSubscription
  extends Promise<AsyncIterator<TeamPlayerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TeamPlayerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTeamPlayerSubscription>() => T;
}

export interface NflTeamPreviousValues {
  id: Int;
  city: String;
  code: String;
  full_name: String;
  name: String;
  nfl_feed_id: String;
}

export interface NflTeamPreviousValuesPromise
  extends Promise<NflTeamPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  city: () => Promise<String>;
  code: () => Promise<String>;
  full_name: () => Promise<String>;
  name: () => Promise<String>;
  nfl_feed_id: () => Promise<String>;
}

export interface NflTeamPreviousValuesSubscription
  extends Promise<AsyncIterator<NflTeamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  city: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  full_name: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  nfl_feed_id: () => Promise<AsyncIterator<String>>;
}

export interface NflTeamSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface NflTeamSubscriptionPayloadPromise
  extends Promise<NflTeamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NflTeamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NflTeamPreviousValuesPromise>() => T;
}

export interface NflTeamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NflTeamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NflTeamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NflTeamPreviousValuesSubscription>() => T;
}

export interface League {
  id: Int;
  name: String;
}

export interface LeaguePromise extends Promise<League>, Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  teams: <T = FragmentableArray<Team>>(
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface LeagueSubscription
  extends Promise<AsyncIterator<League>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  teams: <T = Promise<AsyncIterator<TeamSubscription>>>(
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface NflPlayerPreviousValues {
  id: Int;
  display_name: String;
  esb_id: String;
  first_name: String;
  gsis_id?: String;
  last_name: String;
  nfl_feed_id: Int;
  position: String;
  position_group: String;
  status: String;
}

export interface NflPlayerPreviousValuesPromise
  extends Promise<NflPlayerPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  display_name: () => Promise<String>;
  esb_id: () => Promise<String>;
  first_name: () => Promise<String>;
  gsis_id: () => Promise<String>;
  last_name: () => Promise<String>;
  nfl_feed_id: () => Promise<Int>;
  position: () => Promise<String>;
  position_group: () => Promise<String>;
  status: () => Promise<String>;
}

export interface NflPlayerPreviousValuesSubscription
  extends Promise<AsyncIterator<NflPlayerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  display_name: () => Promise<AsyncIterator<String>>;
  esb_id: () => Promise<AsyncIterator<String>>;
  first_name: () => Promise<AsyncIterator<String>>;
  gsis_id: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  nfl_feed_id: () => Promise<AsyncIterator<Int>>;
  position: () => Promise<AsyncIterator<String>>;
  position_group: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNflTeam {
  count: Int;
}

export interface AggregateNflTeamPromise
  extends Promise<AggregateNflTeam>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNflTeamSubscription
  extends Promise<AsyncIterator<AggregateNflTeam>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TeamPlayerSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface TeamPlayerSubscriptionPayloadPromise
  extends Promise<TeamPlayerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TeamPlayerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TeamPlayerPreviousValuesPromise>() => T;
}

export interface TeamPlayerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TeamPlayerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TeamPlayerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TeamPlayerPreviousValuesSubscription>() => T;
}

export interface NflGameEdge {
  cursor: String;
}

export interface NflGameEdgePromise extends Promise<NflGameEdge>, Fragmentable {
  node: <T = NflGamePromise>() => T;
  cursor: () => Promise<String>;
}

export interface NflGameEdgeSubscription
  extends Promise<AsyncIterator<NflGameEdge>>,
    Fragmentable {
  node: <T = NflGameSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNflPlayer {
  count: Int;
}

export interface AggregateNflPlayerPromise
  extends Promise<AggregateNflPlayer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNflPlayerSubscription
  extends Promise<AsyncIterator<AggregateNflPlayer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "FlipGamePlayer",
    embedded: false
  },
  {
    name: "FlipPosition",
    embedded: false
  },
  {
    name: "GameSeasonType",
    embedded: false
  },
  {
    name: "League",
    embedded: false
  },
  {
    name: "NflGame",
    embedded: false
  },
  {
    name: "NflPlayer",
    embedded: false
  },
  {
    name: "NflTeam",
    embedded: false
  },
  {
    name: "Team",
    embedded: false
  },
  {
    name: "TeamPlayer",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
