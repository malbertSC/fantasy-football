// Code generated by Prisma (prisma@1.20.7). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  league: (where?: LeagueWhereInput) => Promise<boolean>;
  nfl_player: (where?: Nfl_playerWhereInput) => Promise<boolean>;
  nfl_team: (where?: Nfl_teamWhereInput) => Promise<boolean>;
  team: (where?: TeamWhereInput) => Promise<boolean>;
  team_player: (where?: Team_playerWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  league: (where: LeagueWhereUniqueInput) => LeaguePromise;
  leagues: (
    args?: {
      where?: LeagueWhereInput;
      orderBy?: LeagueOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<League>;
  leaguesConnection: (
    args?: {
      where?: LeagueWhereInput;
      orderBy?: LeagueOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LeagueConnectionPromise;
  nfl_player: (where: Nfl_playerWhereUniqueInput) => Nfl_playerPromise;
  nfl_players: (
    args?: {
      where?: Nfl_playerWhereInput;
      orderBy?: Nfl_playerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Nfl_player>;
  nfl_playersConnection: (
    args?: {
      where?: Nfl_playerWhereInput;
      orderBy?: Nfl_playerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Nfl_playerConnectionPromise;
  nfl_team: (where: Nfl_teamWhereUniqueInput) => Nfl_teamPromise;
  nfl_teams: (
    args?: {
      where?: Nfl_teamWhereInput;
      orderBy?: Nfl_teamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Nfl_team>;
  nfl_teamsConnection: (
    args?: {
      where?: Nfl_teamWhereInput;
      orderBy?: Nfl_teamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Nfl_teamConnectionPromise;
  team: (where: TeamWhereUniqueInput) => TeamPromise;
  teams: (
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Team>;
  teamsConnection: (
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TeamConnectionPromise;
  team_player: (where: Team_playerWhereUniqueInput) => Team_playerPromise;
  team_players: (
    args?: {
      where?: Team_playerWhereInput;
      orderBy?: Team_playerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Team_player>;
  team_playersConnection: (
    args?: {
      where?: Team_playerWhereInput;
      orderBy?: Team_playerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Team_playerConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createLeague: (data: LeagueCreateInput) => LeaguePromise;
  updateLeague: (
    args: { data: LeagueUpdateInput; where: LeagueWhereUniqueInput }
  ) => LeaguePromise;
  updateManyLeagues: (
    args: { data: LeagueUpdateManyMutationInput; where?: LeagueWhereInput }
  ) => BatchPayloadPromise;
  upsertLeague: (
    args: {
      where: LeagueWhereUniqueInput;
      create: LeagueCreateInput;
      update: LeagueUpdateInput;
    }
  ) => LeaguePromise;
  deleteLeague: (where: LeagueWhereUniqueInput) => LeaguePromise;
  deleteManyLeagues: (where?: LeagueWhereInput) => BatchPayloadPromise;
  createNfl_player: (data: Nfl_playerCreateInput) => Nfl_playerPromise;
  updateNfl_player: (
    args: { data: Nfl_playerUpdateInput; where: Nfl_playerWhereUniqueInput }
  ) => Nfl_playerPromise;
  updateManyNfl_players: (
    args: {
      data: Nfl_playerUpdateManyMutationInput;
      where?: Nfl_playerWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertNfl_player: (
    args: {
      where: Nfl_playerWhereUniqueInput;
      create: Nfl_playerCreateInput;
      update: Nfl_playerUpdateInput;
    }
  ) => Nfl_playerPromise;
  deleteNfl_player: (where: Nfl_playerWhereUniqueInput) => Nfl_playerPromise;
  deleteManyNfl_players: (where?: Nfl_playerWhereInput) => BatchPayloadPromise;
  createNfl_team: (data: Nfl_teamCreateInput) => Nfl_teamPromise;
  updateNfl_team: (
    args: { data: Nfl_teamUpdateInput; where: Nfl_teamWhereUniqueInput }
  ) => Nfl_teamPromise;
  updateManyNfl_teams: (
    args: { data: Nfl_teamUpdateManyMutationInput; where?: Nfl_teamWhereInput }
  ) => BatchPayloadPromise;
  upsertNfl_team: (
    args: {
      where: Nfl_teamWhereUniqueInput;
      create: Nfl_teamCreateInput;
      update: Nfl_teamUpdateInput;
    }
  ) => Nfl_teamPromise;
  deleteNfl_team: (where: Nfl_teamWhereUniqueInput) => Nfl_teamPromise;
  deleteManyNfl_teams: (where?: Nfl_teamWhereInput) => BatchPayloadPromise;
  createTeam: (data: TeamCreateInput) => TeamPromise;
  updateTeam: (
    args: { data: TeamUpdateInput; where: TeamWhereUniqueInput }
  ) => TeamPromise;
  updateManyTeams: (
    args: { data: TeamUpdateManyMutationInput; where?: TeamWhereInput }
  ) => BatchPayloadPromise;
  upsertTeam: (
    args: {
      where: TeamWhereUniqueInput;
      create: TeamCreateInput;
      update: TeamUpdateInput;
    }
  ) => TeamPromise;
  deleteTeam: (where: TeamWhereUniqueInput) => TeamPromise;
  deleteManyTeams: (where?: TeamWhereInput) => BatchPayloadPromise;
  createTeam_player: (data: Team_playerCreateInput) => Team_playerPromise;
  updateTeam_player: (
    args: { data: Team_playerUpdateInput; where: Team_playerWhereUniqueInput }
  ) => Team_playerPromise;
  upsertTeam_player: (
    args: {
      where: Team_playerWhereUniqueInput;
      create: Team_playerCreateInput;
      update: Team_playerUpdateInput;
    }
  ) => Team_playerPromise;
  deleteTeam_player: (where: Team_playerWhereUniqueInput) => Team_playerPromise;
  deleteManyTeam_players: (
    where?: Team_playerWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  league: (
    where?: LeagueSubscriptionWhereInput
  ) => LeagueSubscriptionPayloadSubscription;
  nfl_player: (
    where?: Nfl_playerSubscriptionWhereInput
  ) => Nfl_playerSubscriptionPayloadSubscription;
  nfl_team: (
    where?: Nfl_teamSubscriptionWhereInput
  ) => Nfl_teamSubscriptionPayloadSubscription;
  team: (
    where?: TeamSubscriptionWhereInput
  ) => TeamSubscriptionPayloadSubscription;
  team_player: (
    where?: Team_playerSubscriptionWhereInput
  ) => Team_playerSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TeamOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Team_playerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Nfl_playerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "display_name_ASC"
  | "display_name_DESC"
  | "esb_id_ASC"
  | "esb_id_DESC"
  | "first_name_ASC"
  | "first_name_DESC"
  | "gsis_id_ASC"
  | "gsis_id_DESC"
  | "last_name_ASC"
  | "last_name_DESC"
  | "nfl_feed_id_ASC"
  | "nfl_feed_id_DESC"
  | "position_ASC"
  | "position_DESC"
  | "position_group_ASC"
  | "position_group_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LeagueOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Nfl_teamOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "city_ASC"
  | "city_DESC"
  | "code_ASC"
  | "code_DESC"
  | "full_name_ASC"
  | "full_name_DESC"
  | "name_ASC"
  | "name_DESC"
  | "nfl_feed_id_ASC"
  | "nfl_feed_id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface Nfl_playerUpdateWithoutTeam_playersDataInput {
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: String;
  nfl_team?: Nfl_teamUpdateOneWithoutNfl_playersInput;
  position?: String;
  position_group?: String;
  status?: String;
}

export type LeagueWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface Nfl_playerUpsertWithoutTeam_playersInput {
  update: Nfl_playerUpdateWithoutTeam_playersDataInput;
  create: Nfl_playerCreateWithoutTeam_playersInput;
}

export interface Nfl_teamWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  full_name?: String;
  full_name_not?: String;
  full_name_in?: String[] | String;
  full_name_not_in?: String[] | String;
  full_name_lt?: String;
  full_name_lte?: String;
  full_name_gt?: String;
  full_name_gte?: String;
  full_name_contains?: String;
  full_name_not_contains?: String;
  full_name_starts_with?: String;
  full_name_not_starts_with?: String;
  full_name_ends_with?: String;
  full_name_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  nfl_feed_id?: String;
  nfl_feed_id_not?: String;
  nfl_feed_id_in?: String[] | String;
  nfl_feed_id_not_in?: String[] | String;
  nfl_feed_id_lt?: String;
  nfl_feed_id_lte?: String;
  nfl_feed_id_gt?: String;
  nfl_feed_id_gte?: String;
  nfl_feed_id_contains?: String;
  nfl_feed_id_not_contains?: String;
  nfl_feed_id_starts_with?: String;
  nfl_feed_id_not_starts_with?: String;
  nfl_feed_id_ends_with?: String;
  nfl_feed_id_not_ends_with?: String;
  nfl_players_every?: Nfl_playerWhereInput;
  nfl_players_some?: Nfl_playerWhereInput;
  nfl_players_none?: Nfl_playerWhereInput;
  AND?: Nfl_teamWhereInput[] | Nfl_teamWhereInput;
  OR?: Nfl_teamWhereInput[] | Nfl_teamWhereInput;
  NOT?: Nfl_teamWhereInput[] | Nfl_teamWhereInput;
}

export interface Nfl_playerCreateOneWithoutTeam_playersInput {
  create?: Nfl_playerCreateWithoutTeam_playersInput;
  connect?: Nfl_playerWhereUniqueInput;
}

export interface TeamUpdateWithoutTeam_playersDataInput {
  league?: LeagueUpdateOneWithoutTeamsInput;
  name?: String;
}

export interface Nfl_playerCreateWithoutTeam_playersInput {
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: String;
  nfl_team?: Nfl_teamCreateOneWithoutNfl_playersInput;
  position?: String;
  position_group?: String;
  status?: String;
}

export interface Team_playerUpsertWithWhereUniqueWithoutTeamInput {
  where: Team_playerWhereUniqueInput;
  update: Team_playerUpdateWithoutTeamDataInput;
  create: Team_playerCreateWithoutTeamInput;
}

export interface Nfl_teamCreateOneWithoutNfl_playersInput {
  create?: Nfl_teamCreateWithoutNfl_playersInput;
  connect?: Nfl_teamWhereUniqueInput;
}

export interface TeamSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TeamWhereInput;
  AND?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  OR?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  NOT?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
}

export interface Nfl_teamCreateWithoutNfl_playersInput {
  city?: String;
  code?: String;
  full_name?: String;
  name?: String;
  nfl_feed_id?: String;
}

export interface LeagueWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  teams_every?: TeamWhereInput;
  teams_some?: TeamWhereInput;
  teams_none?: TeamWhereInput;
  AND?: LeagueWhereInput[] | LeagueWhereInput;
  OR?: LeagueWhereInput[] | LeagueWhereInput;
  NOT?: LeagueWhereInput[] | LeagueWhereInput;
}

export interface LeagueUpdateInput {
  name?: String;
  teams?: TeamUpdateManyWithoutLeagueInput;
}

export interface Nfl_playerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Nfl_playerWhereInput;
  AND?: Nfl_playerSubscriptionWhereInput[] | Nfl_playerSubscriptionWhereInput;
  OR?: Nfl_playerSubscriptionWhereInput[] | Nfl_playerSubscriptionWhereInput;
  NOT?: Nfl_playerSubscriptionWhereInput[] | Nfl_playerSubscriptionWhereInput;
}

export interface TeamUpdateManyWithoutLeagueInput {
  create?: TeamCreateWithoutLeagueInput[] | TeamCreateWithoutLeagueInput;
  delete?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  connect?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  disconnect?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
  update?:
    | TeamUpdateWithWhereUniqueWithoutLeagueInput[]
    | TeamUpdateWithWhereUniqueWithoutLeagueInput;
  upsert?:
    | TeamUpsertWithWhereUniqueWithoutLeagueInput[]
    | TeamUpsertWithWhereUniqueWithoutLeagueInput;
}

export interface Team_playerUpdateInput {
  nfl_player?: Nfl_playerUpdateOneWithoutTeam_playersInput;
  team?: TeamUpdateOneWithoutTeam_playersInput;
}

export interface TeamUpdateWithWhereUniqueWithoutLeagueInput {
  where: TeamWhereUniqueInput;
  data: TeamUpdateWithoutLeagueDataInput;
}

export interface TeamUpdateManyMutationInput {
  name?: String;
}

export interface TeamUpdateWithoutLeagueDataInput {
  name?: String;
  team_players?: Team_playerUpdateManyWithoutTeamInput;
}

export interface TeamUpdateInput {
  league?: LeagueUpdateOneWithoutTeamsInput;
  name?: String;
  team_players?: Team_playerUpdateManyWithoutTeamInput;
}

export interface Team_playerUpdateManyWithoutTeamInput {
  create?:
    | Team_playerCreateWithoutTeamInput[]
    | Team_playerCreateWithoutTeamInput;
  delete?: Team_playerWhereUniqueInput[] | Team_playerWhereUniqueInput;
  connect?: Team_playerWhereUniqueInput[] | Team_playerWhereUniqueInput;
  disconnect?: Team_playerWhereUniqueInput[] | Team_playerWhereUniqueInput;
  update?:
    | Team_playerUpdateWithWhereUniqueWithoutTeamInput[]
    | Team_playerUpdateWithWhereUniqueWithoutTeamInput;
  upsert?:
    | Team_playerUpsertWithWhereUniqueWithoutTeamInput[]
    | Team_playerUpsertWithWhereUniqueWithoutTeamInput;
}

export interface Nfl_teamUpdateManyMutationInput {
  city?: String;
  code?: String;
  full_name?: String;
  name?: String;
  nfl_feed_id?: String;
}

export interface Team_playerUpdateWithWhereUniqueWithoutTeamInput {
  where: Team_playerWhereUniqueInput;
  data: Team_playerUpdateWithoutTeamDataInput;
}

export interface Nfl_playerUpsertWithWhereUniqueWithoutNfl_teamInput {
  where: Nfl_playerWhereUniqueInput;
  update: Nfl_playerUpdateWithoutNfl_teamDataInput;
  create: Nfl_playerCreateWithoutNfl_teamInput;
}

export interface Team_playerUpdateWithoutTeamDataInput {
  nfl_player?: Nfl_playerUpdateOneWithoutTeam_playersInput;
}

export interface Nfl_playerUpdateWithWhereUniqueWithoutNfl_teamInput {
  where: Nfl_playerWhereUniqueInput;
  data: Nfl_playerUpdateWithoutNfl_teamDataInput;
}

export interface Nfl_playerUpdateOneWithoutTeam_playersInput {
  create?: Nfl_playerCreateWithoutTeam_playersInput;
  update?: Nfl_playerUpdateWithoutTeam_playersDataInput;
  upsert?: Nfl_playerUpsertWithoutTeam_playersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Nfl_playerWhereUniqueInput;
}

export type TeamWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface LeagueUpsertWithoutTeamsInput {
  update: LeagueUpdateWithoutTeamsDataInput;
  create: LeagueCreateWithoutTeamsInput;
}

export interface Nfl_playerCreateWithoutNfl_teamInput {
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: String;
  position?: String;
  position_group?: String;
  status?: String;
  team_players?: Team_playerCreateManyWithoutNfl_playerInput;
}

export interface Nfl_teamUpdateOneWithoutNfl_playersInput {
  create?: Nfl_teamCreateWithoutNfl_playersInput;
  update?: Nfl_teamUpdateWithoutNfl_playersDataInput;
  upsert?: Nfl_teamUpsertWithoutNfl_playersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: Nfl_teamWhereUniqueInput;
}

export type Team_playerWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface Nfl_teamUpdateWithoutNfl_playersDataInput {
  city?: String;
  code?: String;
  full_name?: String;
  name?: String;
  nfl_feed_id?: String;
}

export interface Nfl_playerUpdateManyMutationInput {
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: String;
  position?: String;
  position_group?: String;
  status?: String;
}

export interface Nfl_teamUpsertWithoutNfl_playersInput {
  update: Nfl_teamUpdateWithoutNfl_playersDataInput;
  create: Nfl_teamCreateWithoutNfl_playersInput;
}

export interface TeamUpsertWithoutTeam_playersInput {
  update: TeamUpdateWithoutTeam_playersDataInput;
  create: TeamCreateWithoutTeam_playersInput;
}

export interface Nfl_playerWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  display_name?: String;
  display_name_not?: String;
  display_name_in?: String[] | String;
  display_name_not_in?: String[] | String;
  display_name_lt?: String;
  display_name_lte?: String;
  display_name_gt?: String;
  display_name_gte?: String;
  display_name_contains?: String;
  display_name_not_contains?: String;
  display_name_starts_with?: String;
  display_name_not_starts_with?: String;
  display_name_ends_with?: String;
  display_name_not_ends_with?: String;
  esb_id?: String;
  esb_id_not?: String;
  esb_id_in?: String[] | String;
  esb_id_not_in?: String[] | String;
  esb_id_lt?: String;
  esb_id_lte?: String;
  esb_id_gt?: String;
  esb_id_gte?: String;
  esb_id_contains?: String;
  esb_id_not_contains?: String;
  esb_id_starts_with?: String;
  esb_id_not_starts_with?: String;
  esb_id_ends_with?: String;
  esb_id_not_ends_with?: String;
  first_name?: String;
  first_name_not?: String;
  first_name_in?: String[] | String;
  first_name_not_in?: String[] | String;
  first_name_lt?: String;
  first_name_lte?: String;
  first_name_gt?: String;
  first_name_gte?: String;
  first_name_contains?: String;
  first_name_not_contains?: String;
  first_name_starts_with?: String;
  first_name_not_starts_with?: String;
  first_name_ends_with?: String;
  first_name_not_ends_with?: String;
  gsis_id?: String;
  gsis_id_not?: String;
  gsis_id_in?: String[] | String;
  gsis_id_not_in?: String[] | String;
  gsis_id_lt?: String;
  gsis_id_lte?: String;
  gsis_id_gt?: String;
  gsis_id_gte?: String;
  gsis_id_contains?: String;
  gsis_id_not_contains?: String;
  gsis_id_starts_with?: String;
  gsis_id_not_starts_with?: String;
  gsis_id_ends_with?: String;
  gsis_id_not_ends_with?: String;
  last_name?: String;
  last_name_not?: String;
  last_name_in?: String[] | String;
  last_name_not_in?: String[] | String;
  last_name_lt?: String;
  last_name_lte?: String;
  last_name_gt?: String;
  last_name_gte?: String;
  last_name_contains?: String;
  last_name_not_contains?: String;
  last_name_starts_with?: String;
  last_name_not_starts_with?: String;
  last_name_ends_with?: String;
  last_name_not_ends_with?: String;
  nfl_feed_id?: String;
  nfl_feed_id_not?: String;
  nfl_feed_id_in?: String[] | String;
  nfl_feed_id_not_in?: String[] | String;
  nfl_feed_id_lt?: String;
  nfl_feed_id_lte?: String;
  nfl_feed_id_gt?: String;
  nfl_feed_id_gte?: String;
  nfl_feed_id_contains?: String;
  nfl_feed_id_not_contains?: String;
  nfl_feed_id_starts_with?: String;
  nfl_feed_id_not_starts_with?: String;
  nfl_feed_id_ends_with?: String;
  nfl_feed_id_not_ends_with?: String;
  nfl_team?: Nfl_teamWhereInput;
  position?: String;
  position_not?: String;
  position_in?: String[] | String;
  position_not_in?: String[] | String;
  position_lt?: String;
  position_lte?: String;
  position_gt?: String;
  position_gte?: String;
  position_contains?: String;
  position_not_contains?: String;
  position_starts_with?: String;
  position_not_starts_with?: String;
  position_ends_with?: String;
  position_not_ends_with?: String;
  position_group?: String;
  position_group_not?: String;
  position_group_in?: String[] | String;
  position_group_not_in?: String[] | String;
  position_group_lt?: String;
  position_group_lte?: String;
  position_group_gt?: String;
  position_group_gte?: String;
  position_group_contains?: String;
  position_group_not_contains?: String;
  position_group_starts_with?: String;
  position_group_not_starts_with?: String;
  position_group_ends_with?: String;
  position_group_not_ends_with?: String;
  status?: String;
  status_not?: String;
  status_in?: String[] | String;
  status_not_in?: String[] | String;
  status_lt?: String;
  status_lte?: String;
  status_gt?: String;
  status_gte?: String;
  status_contains?: String;
  status_not_contains?: String;
  status_starts_with?: String;
  status_not_starts_with?: String;
  status_ends_with?: String;
  status_not_ends_with?: String;
  team_players_every?: Team_playerWhereInput;
  team_players_some?: Team_playerWhereInput;
  team_players_none?: Team_playerWhereInput;
  AND?: Nfl_playerWhereInput[] | Nfl_playerWhereInput;
  OR?: Nfl_playerWhereInput[] | Nfl_playerWhereInput;
  NOT?: Nfl_playerWhereInput[] | Nfl_playerWhereInput;
}

export interface LeagueCreateInput {
  name?: String;
  teams?: TeamCreateManyWithoutLeagueInput;
}

export interface Team_playerWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  nfl_player?: Nfl_playerWhereInput;
  team?: TeamWhereInput;
  AND?: Team_playerWhereInput[] | Team_playerWhereInput;
  OR?: Team_playerWhereInput[] | Team_playerWhereInput;
  NOT?: Team_playerWhereInput[] | Team_playerWhereInput;
}

export interface TeamCreateWithoutLeagueInput {
  name: String;
  team_players?: Team_playerCreateManyWithoutTeamInput;
}

export interface TeamUpsertWithWhereUniqueWithoutLeagueInput {
  where: TeamWhereUniqueInput;
  update: TeamUpdateWithoutLeagueDataInput;
  create: TeamCreateWithoutLeagueInput;
}

export interface Team_playerCreateWithoutTeamInput {
  nfl_player?: Nfl_playerCreateOneWithoutTeam_playersInput;
}

export interface LeagueUpdateManyMutationInput {
  name?: String;
}

export interface Nfl_teamSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Nfl_teamWhereInput;
  AND?: Nfl_teamSubscriptionWhereInput[] | Nfl_teamSubscriptionWhereInput;
  OR?: Nfl_teamSubscriptionWhereInput[] | Nfl_teamSubscriptionWhereInput;
  NOT?: Nfl_teamSubscriptionWhereInput[] | Nfl_teamSubscriptionWhereInput;
}

export interface LeagueUpdateWithoutTeamsDataInput {
  name?: String;
}

export interface LeagueSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LeagueWhereInput;
  AND?: LeagueSubscriptionWhereInput[] | LeagueSubscriptionWhereInput;
  OR?: LeagueSubscriptionWhereInput[] | LeagueSubscriptionWhereInput;
  NOT?: LeagueSubscriptionWhereInput[] | LeagueSubscriptionWhereInput;
}

export interface LeagueUpdateOneWithoutTeamsInput {
  create?: LeagueCreateWithoutTeamsInput;
  update?: LeagueUpdateWithoutTeamsDataInput;
  upsert?: LeagueUpsertWithoutTeamsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: LeagueWhereUniqueInput;
}

export type Nfl_playerWhereUniqueInput = AtLeastOne<{
  id: Int;
  nfl_feed_id?: String;
}>;

export interface Nfl_playerCreateInput {
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: String;
  nfl_team?: Nfl_teamCreateOneWithoutNfl_playersInput;
  position?: String;
  position_group?: String;
  status?: String;
  team_players?: Team_playerCreateManyWithoutNfl_playerInput;
}

export type Nfl_teamWhereUniqueInput = AtLeastOne<{
  id: Int;
  nfl_feed_id?: String;
}>;

export interface Team_playerCreateManyWithoutNfl_playerInput {
  create?:
    | Team_playerCreateWithoutNfl_playerInput[]
    | Team_playerCreateWithoutNfl_playerInput;
  connect?: Team_playerWhereUniqueInput[] | Team_playerWhereUniqueInput;
}

export interface Nfl_playerUpdateManyWithoutNfl_teamInput {
  create?:
    | Nfl_playerCreateWithoutNfl_teamInput[]
    | Nfl_playerCreateWithoutNfl_teamInput;
  delete?: Nfl_playerWhereUniqueInput[] | Nfl_playerWhereUniqueInput;
  connect?: Nfl_playerWhereUniqueInput[] | Nfl_playerWhereUniqueInput;
  disconnect?: Nfl_playerWhereUniqueInput[] | Nfl_playerWhereUniqueInput;
  update?:
    | Nfl_playerUpdateWithWhereUniqueWithoutNfl_teamInput[]
    | Nfl_playerUpdateWithWhereUniqueWithoutNfl_teamInput;
  upsert?:
    | Nfl_playerUpsertWithWhereUniqueWithoutNfl_teamInput[]
    | Nfl_playerUpsertWithWhereUniqueWithoutNfl_teamInput;
}

export interface Team_playerCreateWithoutNfl_playerInput {
  team?: TeamCreateOneWithoutTeam_playersInput;
}

export interface Nfl_playerCreateManyWithoutNfl_teamInput {
  create?:
    | Nfl_playerCreateWithoutNfl_teamInput[]
    | Nfl_playerCreateWithoutNfl_teamInput;
  connect?: Nfl_playerWhereUniqueInput[] | Nfl_playerWhereUniqueInput;
}

export interface TeamCreateOneWithoutTeam_playersInput {
  create?: TeamCreateWithoutTeam_playersInput;
  connect?: TeamWhereUniqueInput;
}

export interface Team_playerUpsertWithWhereUniqueWithoutNfl_playerInput {
  where: Team_playerWhereUniqueInput;
  update: Team_playerUpdateWithoutNfl_playerDataInput;
  create: Team_playerCreateWithoutNfl_playerInput;
}

export interface TeamCreateWithoutTeam_playersInput {
  league?: LeagueCreateOneWithoutTeamsInput;
  name: String;
}

export interface TeamCreateManyWithoutLeagueInput {
  create?: TeamCreateWithoutLeagueInput[] | TeamCreateWithoutLeagueInput;
  connect?: TeamWhereUniqueInput[] | TeamWhereUniqueInput;
}

export interface LeagueCreateOneWithoutTeamsInput {
  create?: LeagueCreateWithoutTeamsInput;
  connect?: LeagueWhereUniqueInput;
}

export interface Team_playerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: Team_playerWhereInput;
  AND?: Team_playerSubscriptionWhereInput[] | Team_playerSubscriptionWhereInput;
  OR?: Team_playerSubscriptionWhereInput[] | Team_playerSubscriptionWhereInput;
  NOT?: Team_playerSubscriptionWhereInput[] | Team_playerSubscriptionWhereInput;
}

export interface LeagueCreateWithoutTeamsInput {
  name?: String;
}

export interface Team_playerCreateInput {
  nfl_player?: Nfl_playerCreateOneWithoutTeam_playersInput;
  team?: TeamCreateOneWithoutTeam_playersInput;
}

export interface Nfl_playerUpdateInput {
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: String;
  nfl_team?: Nfl_teamUpdateOneWithoutNfl_playersInput;
  position?: String;
  position_group?: String;
  status?: String;
  team_players?: Team_playerUpdateManyWithoutNfl_playerInput;
}

export interface Nfl_playerUpdateWithoutNfl_teamDataInput {
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: String;
  position?: String;
  position_group?: String;
  status?: String;
  team_players?: Team_playerUpdateManyWithoutNfl_playerInput;
}

export interface Nfl_teamCreateInput {
  city?: String;
  code?: String;
  full_name?: String;
  name?: String;
  nfl_feed_id?: String;
  nfl_players?: Nfl_playerCreateManyWithoutNfl_teamInput;
}

export interface TeamUpdateOneWithoutTeam_playersInput {
  create?: TeamCreateWithoutTeam_playersInput;
  update?: TeamUpdateWithoutTeam_playersDataInput;
  upsert?: TeamUpsertWithoutTeam_playersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: TeamWhereUniqueInput;
}

export interface Team_playerUpdateWithoutNfl_playerDataInput {
  team?: TeamUpdateOneWithoutTeam_playersInput;
}

export interface Team_playerUpdateWithWhereUniqueWithoutNfl_playerInput {
  where: Team_playerWhereUniqueInput;
  data: Team_playerUpdateWithoutNfl_playerDataInput;
}

export interface Team_playerUpdateManyWithoutNfl_playerInput {
  create?:
    | Team_playerCreateWithoutNfl_playerInput[]
    | Team_playerCreateWithoutNfl_playerInput;
  delete?: Team_playerWhereUniqueInput[] | Team_playerWhereUniqueInput;
  connect?: Team_playerWhereUniqueInput[] | Team_playerWhereUniqueInput;
  disconnect?: Team_playerWhereUniqueInput[] | Team_playerWhereUniqueInput;
  update?:
    | Team_playerUpdateWithWhereUniqueWithoutNfl_playerInput[]
    | Team_playerUpdateWithWhereUniqueWithoutNfl_playerInput;
  upsert?:
    | Team_playerUpsertWithWhereUniqueWithoutNfl_playerInput[]
    | Team_playerUpsertWithWhereUniqueWithoutNfl_playerInput;
}

export interface Nfl_teamUpdateInput {
  city?: String;
  code?: String;
  full_name?: String;
  name?: String;
  nfl_feed_id?: String;
  nfl_players?: Nfl_playerUpdateManyWithoutNfl_teamInput;
}

export interface TeamCreateInput {
  league?: LeagueCreateOneWithoutTeamsInput;
  name: String;
  team_players?: Team_playerCreateManyWithoutTeamInput;
}

export interface TeamWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  league?: LeagueWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  team_players_every?: Team_playerWhereInput;
  team_players_some?: Team_playerWhereInput;
  team_players_none?: Team_playerWhereInput;
  AND?: TeamWhereInput[] | TeamWhereInput;
  OR?: TeamWhereInput[] | TeamWhereInput;
  NOT?: TeamWhereInput[] | TeamWhereInput;
}

export interface Team_playerCreateManyWithoutTeamInput {
  create?:
    | Team_playerCreateWithoutTeamInput[]
    | Team_playerCreateWithoutTeamInput;
  connect?: Team_playerWhereUniqueInput[] | Team_playerWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Team_playerPreviousValues {
  id: Int;
}

export interface Team_playerPreviousValuesPromise
  extends Promise<Team_playerPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
}

export interface Team_playerPreviousValuesSubscription
  extends Promise<AsyncIterator<Team_playerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
}

export interface LeagueEdge {
  cursor: String;
}

export interface LeagueEdgePromise extends Promise<LeagueEdge>, Fragmentable {
  node: <T = LeaguePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LeagueEdgeSubscription
  extends Promise<AsyncIterator<LeagueEdge>>,
    Fragmentable {
  node: <T = LeagueSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Team {
  id: Int;
  name: String;
}

export interface TeamPromise extends Promise<Team>, Fragmentable {
  id: () => Promise<Int>;
  league: <T = LeaguePromise>() => T;
  name: () => Promise<String>;
  team_players: <T = FragmentableArray<Team_player>>(
    args?: {
      where?: Team_playerWhereInput;
      orderBy?: Team_playerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TeamSubscription
  extends Promise<AsyncIterator<Team>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  league: <T = LeagueSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  team_players: <T = Promise<AsyncIterator<Team_playerSubscription>>>(
    args?: {
      where?: Team_playerWhereInput;
      orderBy?: Team_playerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface TeamPreviousValues {
  id: Int;
  name: String;
}

export interface TeamPreviousValuesPromise
  extends Promise<TeamPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface TeamPreviousValuesSubscription
  extends Promise<AsyncIterator<TeamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Team_player {
  id: Int;
}

export interface Team_playerPromise extends Promise<Team_player>, Fragmentable {
  id: () => Promise<Int>;
  nfl_player: <T = Nfl_playerPromise>() => T;
  team: <T = TeamPromise>() => T;
}

export interface Team_playerSubscription
  extends Promise<AsyncIterator<Team_player>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  nfl_player: <T = Nfl_playerSubscription>() => T;
  team: <T = TeamSubscription>() => T;
}

export interface Team_playerEdge {
  cursor: String;
}

export interface Team_playerEdgePromise
  extends Promise<Team_playerEdge>,
    Fragmentable {
  node: <T = Team_playerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Team_playerEdgeSubscription
  extends Promise<AsyncIterator<Team_playerEdge>>,
    Fragmentable {
  node: <T = Team_playerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTeam {
  count: Int;
}

export interface AggregateTeamPromise
  extends Promise<AggregateTeam>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTeamSubscription
  extends Promise<AsyncIterator<AggregateTeam>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface League {
  id: Int;
  name?: String;
}

export interface LeaguePromise extends Promise<League>, Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  teams: <T = FragmentableArray<Team>>(
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface LeagueSubscription
  extends Promise<AsyncIterator<League>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  teams: <T = Promise<AsyncIterator<TeamSubscription>>>(
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TeamConnection {}

export interface TeamConnectionPromise
  extends Promise<TeamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TeamEdge>>() => T;
  aggregate: <T = AggregateTeamPromise>() => T;
}

export interface TeamConnectionSubscription
  extends Promise<AsyncIterator<TeamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TeamEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTeamSubscription>() => T;
}

export interface LeagueSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LeagueSubscriptionPayloadPromise
  extends Promise<LeagueSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LeaguePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LeaguePreviousValuesPromise>() => T;
}

export interface LeagueSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LeagueSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LeagueSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LeaguePreviousValuesSubscription>() => T;
}

export interface Nfl_teamEdge {
  cursor: String;
}

export interface Nfl_teamEdgePromise
  extends Promise<Nfl_teamEdge>,
    Fragmentable {
  node: <T = Nfl_teamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Nfl_teamEdgeSubscription
  extends Promise<AsyncIterator<Nfl_teamEdge>>,
    Fragmentable {
  node: <T = Nfl_teamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LeaguePreviousValues {
  id: Int;
  name?: String;
}

export interface LeaguePreviousValuesPromise
  extends Promise<LeaguePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface LeaguePreviousValuesSubscription
  extends Promise<AsyncIterator<LeaguePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Team_playerSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface Team_playerSubscriptionPayloadPromise
  extends Promise<Team_playerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Team_playerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Team_playerPreviousValuesPromise>() => T;
}

export interface Team_playerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Team_playerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Team_playerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Team_playerPreviousValuesSubscription>() => T;
}

export interface LeagueConnection {}

export interface LeagueConnectionPromise
  extends Promise<LeagueConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LeagueEdge>>() => T;
  aggregate: <T = AggregateLeaguePromise>() => T;
}

export interface LeagueConnectionSubscription
  extends Promise<AsyncIterator<LeagueConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LeagueEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLeagueSubscription>() => T;
}

export interface Nfl_playerEdge {
  cursor: String;
}

export interface Nfl_playerEdgePromise
  extends Promise<Nfl_playerEdge>,
    Fragmentable {
  node: <T = Nfl_playerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Nfl_playerEdgeSubscription
  extends Promise<AsyncIterator<Nfl_playerEdge>>,
    Fragmentable {
  node: <T = Nfl_playerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Nfl_playerSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface Nfl_playerSubscriptionPayloadPromise
  extends Promise<Nfl_playerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Nfl_playerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Nfl_playerPreviousValuesPromise>() => T;
}

export interface Nfl_playerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Nfl_playerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Nfl_playerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Nfl_playerPreviousValuesSubscription>() => T;
}

export interface AggregateLeague {
  count: Int;
}

export interface AggregateLeaguePromise
  extends Promise<AggregateLeague>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLeagueSubscription
  extends Promise<AsyncIterator<AggregateLeague>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Nfl_playerPreviousValues {
  id: Int;
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: String;
  position?: String;
  position_group?: String;
  status?: String;
}

export interface Nfl_playerPreviousValuesPromise
  extends Promise<Nfl_playerPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  display_name: () => Promise<String>;
  esb_id: () => Promise<String>;
  first_name: () => Promise<String>;
  gsis_id: () => Promise<String>;
  last_name: () => Promise<String>;
  nfl_feed_id: () => Promise<String>;
  position: () => Promise<String>;
  position_group: () => Promise<String>;
  status: () => Promise<String>;
}

export interface Nfl_playerPreviousValuesSubscription
  extends Promise<AsyncIterator<Nfl_playerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  display_name: () => Promise<AsyncIterator<String>>;
  esb_id: () => Promise<AsyncIterator<String>>;
  first_name: () => Promise<AsyncIterator<String>>;
  gsis_id: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  nfl_feed_id: () => Promise<AsyncIterator<String>>;
  position: () => Promise<AsyncIterator<String>>;
  position_group: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
}

export interface Team_playerConnection {}

export interface Team_playerConnectionPromise
  extends Promise<Team_playerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Team_playerEdge>>() => T;
  aggregate: <T = AggregateTeam_playerPromise>() => T;
}

export interface Team_playerConnectionSubscription
  extends Promise<AsyncIterator<Team_playerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Team_playerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTeam_playerSubscription>() => T;
}

export interface Nfl_team {
  id: Int;
  city?: String;
  code?: String;
  full_name?: String;
  name?: String;
  nfl_feed_id?: String;
}

export interface Nfl_teamPromise extends Promise<Nfl_team>, Fragmentable {
  id: () => Promise<Int>;
  city: () => Promise<String>;
  code: () => Promise<String>;
  full_name: () => Promise<String>;
  name: () => Promise<String>;
  nfl_feed_id: () => Promise<String>;
  nfl_players: <T = FragmentableArray<Nfl_player>>(
    args?: {
      where?: Nfl_playerWhereInput;
      orderBy?: Nfl_playerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Nfl_teamSubscription
  extends Promise<AsyncIterator<Nfl_team>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  city: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  full_name: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  nfl_feed_id: () => Promise<AsyncIterator<String>>;
  nfl_players: <T = Promise<AsyncIterator<Nfl_playerSubscription>>>(
    args?: {
      where?: Nfl_playerWhereInput;
      orderBy?: Nfl_playerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateNfl_team {
  count: Int;
}

export interface AggregateNfl_teamPromise
  extends Promise<AggregateNfl_team>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNfl_teamSubscription
  extends Promise<AsyncIterator<AggregateNfl_team>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TeamSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface TeamSubscriptionPayloadPromise
  extends Promise<TeamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TeamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TeamPreviousValuesPromise>() => T;
}

export interface TeamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TeamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TeamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TeamPreviousValuesSubscription>() => T;
}

export interface Nfl_player {
  id: Int;
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: String;
  position?: String;
  position_group?: String;
  status?: String;
}

export interface Nfl_playerPromise extends Promise<Nfl_player>, Fragmentable {
  id: () => Promise<Int>;
  display_name: () => Promise<String>;
  esb_id: () => Promise<String>;
  first_name: () => Promise<String>;
  gsis_id: () => Promise<String>;
  last_name: () => Promise<String>;
  nfl_feed_id: () => Promise<String>;
  nfl_team: <T = Nfl_teamPromise>() => T;
  position: () => Promise<String>;
  position_group: () => Promise<String>;
  status: () => Promise<String>;
  team_players: <T = FragmentableArray<Team_player>>(
    args?: {
      where?: Team_playerWhereInput;
      orderBy?: Team_playerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Nfl_playerSubscription
  extends Promise<AsyncIterator<Nfl_player>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  display_name: () => Promise<AsyncIterator<String>>;
  esb_id: () => Promise<AsyncIterator<String>>;
  first_name: () => Promise<AsyncIterator<String>>;
  gsis_id: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  nfl_feed_id: () => Promise<AsyncIterator<String>>;
  nfl_team: <T = Nfl_teamSubscription>() => T;
  position: () => Promise<AsyncIterator<String>>;
  position_group: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  team_players: <T = Promise<AsyncIterator<Team_playerSubscription>>>(
    args?: {
      where?: Team_playerWhereInput;
      orderBy?: Team_playerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Nfl_teamPreviousValues {
  id: Int;
  city?: String;
  code?: String;
  full_name?: String;
  name?: String;
  nfl_feed_id?: String;
}

export interface Nfl_teamPreviousValuesPromise
  extends Promise<Nfl_teamPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  city: () => Promise<String>;
  code: () => Promise<String>;
  full_name: () => Promise<String>;
  name: () => Promise<String>;
  nfl_feed_id: () => Promise<String>;
}

export interface Nfl_teamPreviousValuesSubscription
  extends Promise<AsyncIterator<Nfl_teamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  city: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  full_name: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  nfl_feed_id: () => Promise<AsyncIterator<String>>;
}

export interface Nfl_teamSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface Nfl_teamSubscriptionPayloadPromise
  extends Promise<Nfl_teamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Nfl_teamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Nfl_teamPreviousValuesPromise>() => T;
}

export interface Nfl_teamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Nfl_teamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Nfl_teamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Nfl_teamPreviousValuesSubscription>() => T;
}

export interface Nfl_teamConnection {}

export interface Nfl_teamConnectionPromise
  extends Promise<Nfl_teamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Nfl_teamEdge>>() => T;
  aggregate: <T = AggregateNfl_teamPromise>() => T;
}

export interface Nfl_teamConnectionSubscription
  extends Promise<AsyncIterator<Nfl_teamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Nfl_teamEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNfl_teamSubscription>() => T;
}

export interface TeamEdge {
  cursor: String;
}

export interface TeamEdgePromise extends Promise<TeamEdge>, Fragmentable {
  node: <T = TeamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TeamEdgeSubscription
  extends Promise<AsyncIterator<TeamEdge>>,
    Fragmentable {
  node: <T = TeamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTeam_player {
  count: Int;
}

export interface AggregateTeam_playerPromise
  extends Promise<AggregateTeam_player>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTeam_playerSubscription
  extends Promise<AsyncIterator<AggregateTeam_player>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Nfl_playerConnection {}

export interface Nfl_playerConnectionPromise
  extends Promise<Nfl_playerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Nfl_playerEdge>>() => T;
  aggregate: <T = AggregateNfl_playerPromise>() => T;
}

export interface Nfl_playerConnectionSubscription
  extends Promise<AsyncIterator<Nfl_playerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Nfl_playerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNfl_playerSubscription>() => T;
}

export interface AggregateNfl_player {
  count: Int;
}

export interface AggregateNfl_playerPromise
  extends Promise<AggregateNfl_player>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNfl_playerSubscription
  extends Promise<AsyncIterator<AggregateNfl_player>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "League",
    embedded: false
  },
  {
    name: "Nfl_player",
    embedded: false
  },
  {
    name: "Nfl_team",
    embedded: false
  },
  {
    name: "Team",
    embedded: false
  },
  {
    name: "Team_player",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
