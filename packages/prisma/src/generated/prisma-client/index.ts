// Code generated by Prisma (prisma@1.22.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  flipGamePlayer: (where?: FlipGamePlayerWhereInput) => Promise<boolean>;
  league: (where?: LeagueWhereInput) => Promise<boolean>;
  leagueLineup: (where?: LeagueLineupWhereInput) => Promise<boolean>;
  leagueMember: (where?: LeagueMemberWhereInput) => Promise<boolean>;
  lineup: (where?: LineupWhereInput) => Promise<boolean>;
  lineupPlayer: (where?: LineupPlayerWhereInput) => Promise<boolean>;
  nflGame: (where?: NflGameWhereInput) => Promise<boolean>;
  nflPlayer: (where?: NflPlayerWhereInput) => Promise<boolean>;
  nflTeam: (where?: NflTeamWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  flipGamePlayer: (
    where: FlipGamePlayerWhereUniqueInput
  ) => FlipGamePlayerPromise;
  flipGamePlayers: (
    args?: {
      where?: FlipGamePlayerWhereInput;
      orderBy?: FlipGamePlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<FlipGamePlayer>;
  flipGamePlayersConnection: (
    args?: {
      where?: FlipGamePlayerWhereInput;
      orderBy?: FlipGamePlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FlipGamePlayerConnectionPromise;
  league: (where: LeagueWhereUniqueInput) => LeaguePromise;
  leagues: (
    args?: {
      where?: LeagueWhereInput;
      orderBy?: LeagueOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<League>;
  leaguesConnection: (
    args?: {
      where?: LeagueWhereInput;
      orderBy?: LeagueOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LeagueConnectionPromise;
  leagueLineup: (where: LeagueLineupWhereUniqueInput) => LeagueLineupPromise;
  leagueLineups: (
    args?: {
      where?: LeagueLineupWhereInput;
      orderBy?: LeagueLineupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<LeagueLineup>;
  leagueLineupsConnection: (
    args?: {
      where?: LeagueLineupWhereInput;
      orderBy?: LeagueLineupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LeagueLineupConnectionPromise;
  leagueMember: (where: LeagueMemberWhereUniqueInput) => LeagueMemberPromise;
  leagueMembers: (
    args?: {
      where?: LeagueMemberWhereInput;
      orderBy?: LeagueMemberOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<LeagueMember>;
  leagueMembersConnection: (
    args?: {
      where?: LeagueMemberWhereInput;
      orderBy?: LeagueMemberOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LeagueMemberConnectionPromise;
  lineup: (where: LineupWhereUniqueInput) => LineupPromise;
  lineups: (
    args?: {
      where?: LineupWhereInput;
      orderBy?: LineupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Lineup>;
  lineupsConnection: (
    args?: {
      where?: LineupWhereInput;
      orderBy?: LineupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LineupConnectionPromise;
  lineupPlayer: (where: LineupPlayerWhereUniqueInput) => LineupPlayerPromise;
  lineupPlayers: (
    args?: {
      where?: LineupPlayerWhereInput;
      orderBy?: LineupPlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<LineupPlayer>;
  lineupPlayersConnection: (
    args?: {
      where?: LineupPlayerWhereInput;
      orderBy?: LineupPlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LineupPlayerConnectionPromise;
  nflGame: (where: NflGameWhereUniqueInput) => NflGamePromise;
  nflGames: (
    args?: {
      where?: NflGameWhereInput;
      orderBy?: NflGameOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<NflGame>;
  nflGamesConnection: (
    args?: {
      where?: NflGameWhereInput;
      orderBy?: NflGameOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => NflGameConnectionPromise;
  nflPlayer: (where: NflPlayerWhereUniqueInput) => NflPlayerPromise;
  nflPlayers: (
    args?: {
      where?: NflPlayerWhereInput;
      orderBy?: NflPlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<NflPlayer>;
  nflPlayersConnection: (
    args?: {
      where?: NflPlayerWhereInput;
      orderBy?: NflPlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => NflPlayerConnectionPromise;
  nflTeam: (where: NflTeamWhereUniqueInput) => NflTeamPromise;
  nflTeams: (
    args?: {
      where?: NflTeamWhereInput;
      orderBy?: NflTeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<NflTeam>;
  nflTeamsConnection: (
    args?: {
      where?: NflTeamWhereInput;
      orderBy?: NflTeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => NflTeamConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createFlipGamePlayer: (
    data: FlipGamePlayerCreateInput
  ) => FlipGamePlayerPromise;
  updateFlipGamePlayer: (
    args: {
      data: FlipGamePlayerUpdateInput;
      where: FlipGamePlayerWhereUniqueInput;
    }
  ) => FlipGamePlayerPromise;
  updateManyFlipGamePlayers: (
    args: {
      data: FlipGamePlayerUpdateManyMutationInput;
      where?: FlipGamePlayerWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertFlipGamePlayer: (
    args: {
      where: FlipGamePlayerWhereUniqueInput;
      create: FlipGamePlayerCreateInput;
      update: FlipGamePlayerUpdateInput;
    }
  ) => FlipGamePlayerPromise;
  deleteFlipGamePlayer: (
    where: FlipGamePlayerWhereUniqueInput
  ) => FlipGamePlayerPromise;
  deleteManyFlipGamePlayers: (
    where?: FlipGamePlayerWhereInput
  ) => BatchPayloadPromise;
  createLeague: (data: LeagueCreateInput) => LeaguePromise;
  updateLeague: (
    args: { data: LeagueUpdateInput; where: LeagueWhereUniqueInput }
  ) => LeaguePromise;
  updateManyLeagues: (
    args: { data: LeagueUpdateManyMutationInput; where?: LeagueWhereInput }
  ) => BatchPayloadPromise;
  upsertLeague: (
    args: {
      where: LeagueWhereUniqueInput;
      create: LeagueCreateInput;
      update: LeagueUpdateInput;
    }
  ) => LeaguePromise;
  deleteLeague: (where: LeagueWhereUniqueInput) => LeaguePromise;
  deleteManyLeagues: (where?: LeagueWhereInput) => BatchPayloadPromise;
  createLeagueLineup: (data: LeagueLineupCreateInput) => LeagueLineupPromise;
  updateLeagueLineup: (
    args: { data: LeagueLineupUpdateInput; where: LeagueLineupWhereUniqueInput }
  ) => LeagueLineupPromise;
  upsertLeagueLineup: (
    args: {
      where: LeagueLineupWhereUniqueInput;
      create: LeagueLineupCreateInput;
      update: LeagueLineupUpdateInput;
    }
  ) => LeagueLineupPromise;
  deleteLeagueLineup: (
    where: LeagueLineupWhereUniqueInput
  ) => LeagueLineupPromise;
  deleteManyLeagueLineups: (
    where?: LeagueLineupWhereInput
  ) => BatchPayloadPromise;
  createLeagueMember: (data: LeagueMemberCreateInput) => LeagueMemberPromise;
  updateLeagueMember: (
    args: { data: LeagueMemberUpdateInput; where: LeagueMemberWhereUniqueInput }
  ) => LeagueMemberPromise;
  upsertLeagueMember: (
    args: {
      where: LeagueMemberWhereUniqueInput;
      create: LeagueMemberCreateInput;
      update: LeagueMemberUpdateInput;
    }
  ) => LeagueMemberPromise;
  deleteLeagueMember: (
    where: LeagueMemberWhereUniqueInput
  ) => LeagueMemberPromise;
  deleteManyLeagueMembers: (
    where?: LeagueMemberWhereInput
  ) => BatchPayloadPromise;
  createLineup: (data: LineupCreateInput) => LineupPromise;
  updateLineup: (
    args: { data: LineupUpdateInput; where: LineupWhereUniqueInput }
  ) => LineupPromise;
  updateManyLineups: (
    args: { data: LineupUpdateManyMutationInput; where?: LineupWhereInput }
  ) => BatchPayloadPromise;
  upsertLineup: (
    args: {
      where: LineupWhereUniqueInput;
      create: LineupCreateInput;
      update: LineupUpdateInput;
    }
  ) => LineupPromise;
  deleteLineup: (where: LineupWhereUniqueInput) => LineupPromise;
  deleteManyLineups: (where?: LineupWhereInput) => BatchPayloadPromise;
  createLineupPlayer: (data: LineupPlayerCreateInput) => LineupPlayerPromise;
  updateLineupPlayer: (
    args: { data: LineupPlayerUpdateInput; where: LineupPlayerWhereUniqueInput }
  ) => LineupPlayerPromise;
  upsertLineupPlayer: (
    args: {
      where: LineupPlayerWhereUniqueInput;
      create: LineupPlayerCreateInput;
      update: LineupPlayerUpdateInput;
    }
  ) => LineupPlayerPromise;
  deleteLineupPlayer: (
    where: LineupPlayerWhereUniqueInput
  ) => LineupPlayerPromise;
  deleteManyLineupPlayers: (
    where?: LineupPlayerWhereInput
  ) => BatchPayloadPromise;
  createNflGame: (data: NflGameCreateInput) => NflGamePromise;
  updateNflGame: (
    args: { data: NflGameUpdateInput; where: NflGameWhereUniqueInput }
  ) => NflGamePromise;
  updateManyNflGames: (
    args: { data: NflGameUpdateManyMutationInput; where?: NflGameWhereInput }
  ) => BatchPayloadPromise;
  upsertNflGame: (
    args: {
      where: NflGameWhereUniqueInput;
      create: NflGameCreateInput;
      update: NflGameUpdateInput;
    }
  ) => NflGamePromise;
  deleteNflGame: (where: NflGameWhereUniqueInput) => NflGamePromise;
  deleteManyNflGames: (where?: NflGameWhereInput) => BatchPayloadPromise;
  createNflPlayer: (data: NflPlayerCreateInput) => NflPlayerPromise;
  updateNflPlayer: (
    args: { data: NflPlayerUpdateInput; where: NflPlayerWhereUniqueInput }
  ) => NflPlayerPromise;
  updateManyNflPlayers: (
    args: {
      data: NflPlayerUpdateManyMutationInput;
      where?: NflPlayerWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertNflPlayer: (
    args: {
      where: NflPlayerWhereUniqueInput;
      create: NflPlayerCreateInput;
      update: NflPlayerUpdateInput;
    }
  ) => NflPlayerPromise;
  deleteNflPlayer: (where: NflPlayerWhereUniqueInput) => NflPlayerPromise;
  deleteManyNflPlayers: (where?: NflPlayerWhereInput) => BatchPayloadPromise;
  createNflTeam: (data: NflTeamCreateInput) => NflTeamPromise;
  updateNflTeam: (
    args: { data: NflTeamUpdateInput; where: NflTeamWhereUniqueInput }
  ) => NflTeamPromise;
  updateManyNflTeams: (
    args: { data: NflTeamUpdateManyMutationInput; where?: NflTeamWhereInput }
  ) => BatchPayloadPromise;
  upsertNflTeam: (
    args: {
      where: NflTeamWhereUniqueInput;
      create: NflTeamCreateInput;
      update: NflTeamUpdateInput;
    }
  ) => NflTeamPromise;
  deleteNflTeam: (where: NflTeamWhereUniqueInput) => NflTeamPromise;
  deleteManyNflTeams: (where?: NflTeamWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  flipGamePlayer: (
    where?: FlipGamePlayerSubscriptionWhereInput
  ) => FlipGamePlayerSubscriptionPayloadSubscription;
  league: (
    where?: LeagueSubscriptionWhereInput
  ) => LeagueSubscriptionPayloadSubscription;
  leagueLineup: (
    where?: LeagueLineupSubscriptionWhereInput
  ) => LeagueLineupSubscriptionPayloadSubscription;
  leagueMember: (
    where?: LeagueMemberSubscriptionWhereInput
  ) => LeagueMemberSubscriptionPayloadSubscription;
  lineup: (
    where?: LineupSubscriptionWhereInput
  ) => LineupSubscriptionPayloadSubscription;
  lineupPlayer: (
    where?: LineupPlayerSubscriptionWhereInput
  ) => LineupPlayerSubscriptionPayloadSubscription;
  nflGame: (
    where?: NflGameSubscriptionWhereInput
  ) => NflGameSubscriptionPayloadSubscription;
  nflPlayer: (
    where?: NflPlayerSubscriptionWhereInput
  ) => NflPlayerSubscriptionPayloadSubscription;
  nflTeam: (
    where?: NflTeamSubscriptionWhereInput
  ) => NflTeamSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type NflPlayerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "display_name_ASC"
  | "display_name_DESC"
  | "esb_id_ASC"
  | "esb_id_DESC"
  | "first_name_ASC"
  | "first_name_DESC"
  | "gsis_id_ASC"
  | "gsis_id_DESC"
  | "last_name_ASC"
  | "last_name_DESC"
  | "nfl_feed_id_ASC"
  | "nfl_feed_id_DESC"
  | "position_ASC"
  | "position_DESC"
  | "position_group_ASC"
  | "position_group_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FlipGamePlayerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "position_ASC"
  | "position_DESC"
  | "projected_score_ASC"
  | "projected_score_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LineupPlayerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "passwordHash_ASC"
  | "passwordHash_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LeagueLineupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FlipPosition = "QB" | "WR1" | "WR2" | "RB" | "TE";

export type GameSeasonType = "PRE" | "REG" | "POST" | "PRO";

export type LeagueOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NflTeamOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "city_ASC"
  | "city_DESC"
  | "code_ASC"
  | "code_DESC"
  | "full_name_ASC"
  | "full_name_DESC"
  | "name_ASC"
  | "name_DESC"
  | "nfl_feed_id_ASC"
  | "nfl_feed_id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type LeagueMemberOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LineupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NflGameOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "week_ASC"
  | "week_DESC"
  | "season_ASC"
  | "season_DESC"
  | "nfl_feed_id_ASC"
  | "nfl_feed_id_DESC"
  | "nfl_feed_key_ASC"
  | "nfl_feed_key_DESC"
  | "start_ASC"
  | "start_DESC"
  | "season_type_ASC"
  | "season_type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface LeagueCreateInput {
  name: String;
  league_lineups?: LeagueLineupCreateManyWithoutLeagueInput;
  league_members?: LeagueMemberCreateManyWithoutLeagueInput;
  owner_user: UserCreateOneWithoutLeaguesInput;
}

export type FlipGamePlayerWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface NflGameWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  away_team?: NflTeamWhereInput;
  home_team?: NflTeamWhereInput;
  week?: Int;
  week_not?: Int;
  week_in?: Int[] | Int;
  week_not_in?: Int[] | Int;
  week_lt?: Int;
  week_lte?: Int;
  week_gt?: Int;
  week_gte?: Int;
  season?: Int;
  season_not?: Int;
  season_in?: Int[] | Int;
  season_not_in?: Int[] | Int;
  season_lt?: Int;
  season_lte?: Int;
  season_gt?: Int;
  season_gte?: Int;
  nfl_feed_id?: Int;
  nfl_feed_id_not?: Int;
  nfl_feed_id_in?: Int[] | Int;
  nfl_feed_id_not_in?: Int[] | Int;
  nfl_feed_id_lt?: Int;
  nfl_feed_id_lte?: Int;
  nfl_feed_id_gt?: Int;
  nfl_feed_id_gte?: Int;
  nfl_feed_key?: Int;
  nfl_feed_key_not?: Int;
  nfl_feed_key_in?: Int[] | Int;
  nfl_feed_key_not_in?: Int[] | Int;
  nfl_feed_key_lt?: Int;
  nfl_feed_key_lte?: Int;
  nfl_feed_key_gt?: Int;
  nfl_feed_key_gte?: Int;
  start?: DateTimeInput;
  start_not?: DateTimeInput;
  start_in?: DateTimeInput[] | DateTimeInput;
  start_not_in?: DateTimeInput[] | DateTimeInput;
  start_lt?: DateTimeInput;
  start_lte?: DateTimeInput;
  start_gt?: DateTimeInput;
  start_gte?: DateTimeInput;
  season_type?: GameSeasonType;
  season_type_not?: GameSeasonType;
  season_type_in?: GameSeasonType[] | GameSeasonType;
  season_type_not_in?: GameSeasonType[] | GameSeasonType;
  AND?: NflGameWhereInput[] | NflGameWhereInput;
  OR?: NflGameWhereInput[] | NflGameWhereInput;
  NOT?: NflGameWhereInput[] | NflGameWhereInput;
}

export interface NflTeamCreateOneWithoutNfl_playersInput {
  create?: NflTeamCreateWithoutNfl_playersInput;
  connect?: NflTeamWhereUniqueInput;
}

export interface LineupPlayerUpdateWithoutLineupDataInput {
  nfl_player?: NflPlayerUpdateOneRequiredInput;
}

export interface NflTeamCreateWithoutNfl_playersInput {
  city: String;
  code: String;
  full_name: String;
  name: String;
  nfl_feed_id: String;
}

export interface UserCreateInput {
  username: String;
  passwordHash: String;
  leagues?: LeagueCreateManyWithoutOwner_userInput;
}

export interface FlipGamePlayerUpdateInput {
  game?: NflGameUpdateOneRequiredInput;
  team?: NflTeamUpdateOneRequiredInput;
  position?: FlipPosition;
  player?: NflPlayerUpdateOneRequiredInput;
  projected_score?: Float;
}

export interface NflTeamSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NflTeamWhereInput;
  AND?: NflTeamSubscriptionWhereInput[] | NflTeamSubscriptionWhereInput;
  OR?: NflTeamSubscriptionWhereInput[] | NflTeamSubscriptionWhereInput;
  NOT?: NflTeamSubscriptionWhereInput[] | NflTeamSubscriptionWhereInput;
}

export interface NflGameUpdateOneRequiredInput {
  create?: NflGameCreateInput;
  update?: NflGameUpdateDataInput;
  upsert?: NflGameUpsertNestedInput;
  connect?: NflGameWhereUniqueInput;
}

export type LeagueWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface NflGameUpdateDataInput {
  away_team?: NflTeamUpdateOneRequiredInput;
  home_team?: NflTeamUpdateOneRequiredInput;
  week?: Int;
  season?: Int;
  nfl_feed_id?: Int;
  nfl_feed_key?: Int;
  start?: DateTimeInput;
  season_type?: GameSeasonType;
}

export interface LeagueLineupWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  lineup?: LineupWhereInput;
  league?: LeagueWhereInput;
  AND?: LeagueLineupWhereInput[] | LeagueLineupWhereInput;
  OR?: LeagueLineupWhereInput[] | LeagueLineupWhereInput;
  NOT?: LeagueLineupWhereInput[] | LeagueLineupWhereInput;
}

export interface NflTeamUpdateOneRequiredInput {
  create?: NflTeamCreateInput;
  update?: NflTeamUpdateDataInput;
  upsert?: NflTeamUpsertNestedInput;
  connect?: NflTeamWhereUniqueInput;
}

export interface LeagueWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  league_lineups_every?: LeagueLineupWhereInput;
  league_lineups_some?: LeagueLineupWhereInput;
  league_lineups_none?: LeagueLineupWhereInput;
  league_members_every?: LeagueMemberWhereInput;
  league_members_some?: LeagueMemberWhereInput;
  league_members_none?: LeagueMemberWhereInput;
  owner_user?: UserWhereInput;
  AND?: LeagueWhereInput[] | LeagueWhereInput;
  OR?: LeagueWhereInput[] | LeagueWhereInput;
  NOT?: LeagueWhereInput[] | LeagueWhereInput;
}

export interface NflTeamUpdateDataInput {
  city?: String;
  code?: String;
  full_name?: String;
  name?: String;
  nfl_feed_id?: String;
  nfl_players?: NflPlayerUpdateManyWithoutNfl_teamInput;
}

export interface UserWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  passwordHash?: String;
  passwordHash_not?: String;
  passwordHash_in?: String[] | String;
  passwordHash_not_in?: String[] | String;
  passwordHash_lt?: String;
  passwordHash_lte?: String;
  passwordHash_gt?: String;
  passwordHash_gte?: String;
  passwordHash_contains?: String;
  passwordHash_not_contains?: String;
  passwordHash_starts_with?: String;
  passwordHash_not_starts_with?: String;
  passwordHash_ends_with?: String;
  passwordHash_not_ends_with?: String;
  leagues_every?: LeagueWhereInput;
  leagues_some?: LeagueWhereInput;
  leagues_none?: LeagueWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface NflPlayerUpdateManyWithoutNfl_teamInput {
  create?:
    | NflPlayerCreateWithoutNfl_teamInput[]
    | NflPlayerCreateWithoutNfl_teamInput;
  delete?: NflPlayerWhereUniqueInput[] | NflPlayerWhereUniqueInput;
  connect?: NflPlayerWhereUniqueInput[] | NflPlayerWhereUniqueInput;
  disconnect?: NflPlayerWhereUniqueInput[] | NflPlayerWhereUniqueInput;
  update?:
    | NflPlayerUpdateWithWhereUniqueWithoutNfl_teamInput[]
    | NflPlayerUpdateWithWhereUniqueWithoutNfl_teamInput;
  upsert?:
    | NflPlayerUpsertWithWhereUniqueWithoutNfl_teamInput[]
    | NflPlayerUpsertWithWhereUniqueWithoutNfl_teamInput;
  deleteMany?: NflPlayerScalarWhereInput[] | NflPlayerScalarWhereInput;
  updateMany?:
    | NflPlayerUpdateManyWithWhereNestedInput[]
    | NflPlayerUpdateManyWithWhereNestedInput;
}

export interface LineupPlayerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LineupPlayerWhereInput;
  AND?:
    | LineupPlayerSubscriptionWhereInput[]
    | LineupPlayerSubscriptionWhereInput;
  OR?:
    | LineupPlayerSubscriptionWhereInput[]
    | LineupPlayerSubscriptionWhereInput;
  NOT?:
    | LineupPlayerSubscriptionWhereInput[]
    | LineupPlayerSubscriptionWhereInput;
}

export interface NflPlayerUpdateWithWhereUniqueWithoutNfl_teamInput {
  where: NflPlayerWhereUniqueInput;
  data: NflPlayerUpdateWithoutNfl_teamDataInput;
}

export interface LeagueMemberSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LeagueMemberWhereInput;
  AND?:
    | LeagueMemberSubscriptionWhereInput[]
    | LeagueMemberSubscriptionWhereInput;
  OR?:
    | LeagueMemberSubscriptionWhereInput[]
    | LeagueMemberSubscriptionWhereInput;
  NOT?:
    | LeagueMemberSubscriptionWhereInput[]
    | LeagueMemberSubscriptionWhereInput;
}

export interface NflPlayerUpdateWithoutNfl_teamDataInput {
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: Int;
  position?: String;
  position_group?: String;
  status?: String;
}

export interface LeagueSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LeagueWhereInput;
  AND?: LeagueSubscriptionWhereInput[] | LeagueSubscriptionWhereInput;
  OR?: LeagueSubscriptionWhereInput[] | LeagueSubscriptionWhereInput;
  NOT?: LeagueSubscriptionWhereInput[] | LeagueSubscriptionWhereInput;
}

export interface NflPlayerUpsertWithWhereUniqueWithoutNfl_teamInput {
  where: NflPlayerWhereUniqueInput;
  update: NflPlayerUpdateWithoutNfl_teamDataInput;
  create: NflPlayerCreateWithoutNfl_teamInput;
}

export interface UserUpdateManyMutationInput {
  username?: String;
  passwordHash?: String;
}

export interface NflPlayerScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  display_name?: String;
  display_name_not?: String;
  display_name_in?: String[] | String;
  display_name_not_in?: String[] | String;
  display_name_lt?: String;
  display_name_lte?: String;
  display_name_gt?: String;
  display_name_gte?: String;
  display_name_contains?: String;
  display_name_not_contains?: String;
  display_name_starts_with?: String;
  display_name_not_starts_with?: String;
  display_name_ends_with?: String;
  display_name_not_ends_with?: String;
  esb_id?: String;
  esb_id_not?: String;
  esb_id_in?: String[] | String;
  esb_id_not_in?: String[] | String;
  esb_id_lt?: String;
  esb_id_lte?: String;
  esb_id_gt?: String;
  esb_id_gte?: String;
  esb_id_contains?: String;
  esb_id_not_contains?: String;
  esb_id_starts_with?: String;
  esb_id_not_starts_with?: String;
  esb_id_ends_with?: String;
  esb_id_not_ends_with?: String;
  first_name?: String;
  first_name_not?: String;
  first_name_in?: String[] | String;
  first_name_not_in?: String[] | String;
  first_name_lt?: String;
  first_name_lte?: String;
  first_name_gt?: String;
  first_name_gte?: String;
  first_name_contains?: String;
  first_name_not_contains?: String;
  first_name_starts_with?: String;
  first_name_not_starts_with?: String;
  first_name_ends_with?: String;
  first_name_not_ends_with?: String;
  gsis_id?: String;
  gsis_id_not?: String;
  gsis_id_in?: String[] | String;
  gsis_id_not_in?: String[] | String;
  gsis_id_lt?: String;
  gsis_id_lte?: String;
  gsis_id_gt?: String;
  gsis_id_gte?: String;
  gsis_id_contains?: String;
  gsis_id_not_contains?: String;
  gsis_id_starts_with?: String;
  gsis_id_not_starts_with?: String;
  gsis_id_ends_with?: String;
  gsis_id_not_ends_with?: String;
  last_name?: String;
  last_name_not?: String;
  last_name_in?: String[] | String;
  last_name_not_in?: String[] | String;
  last_name_lt?: String;
  last_name_lte?: String;
  last_name_gt?: String;
  last_name_gte?: String;
  last_name_contains?: String;
  last_name_not_contains?: String;
  last_name_starts_with?: String;
  last_name_not_starts_with?: String;
  last_name_ends_with?: String;
  last_name_not_ends_with?: String;
  nfl_feed_id?: Int;
  nfl_feed_id_not?: Int;
  nfl_feed_id_in?: Int[] | Int;
  nfl_feed_id_not_in?: Int[] | Int;
  nfl_feed_id_lt?: Int;
  nfl_feed_id_lte?: Int;
  nfl_feed_id_gt?: Int;
  nfl_feed_id_gte?: Int;
  position?: String;
  position_not?: String;
  position_in?: String[] | String;
  position_not_in?: String[] | String;
  position_lt?: String;
  position_lte?: String;
  position_gt?: String;
  position_gte?: String;
  position_contains?: String;
  position_not_contains?: String;
  position_starts_with?: String;
  position_not_starts_with?: String;
  position_ends_with?: String;
  position_not_ends_with?: String;
  position_group?: String;
  position_group_not?: String;
  position_group_in?: String[] | String;
  position_group_not_in?: String[] | String;
  position_group_lt?: String;
  position_group_lte?: String;
  position_group_gt?: String;
  position_group_gte?: String;
  position_group_contains?: String;
  position_group_not_contains?: String;
  position_group_starts_with?: String;
  position_group_not_starts_with?: String;
  position_group_ends_with?: String;
  position_group_not_ends_with?: String;
  status?: String;
  status_not?: String;
  status_in?: String[] | String;
  status_not_in?: String[] | String;
  status_lt?: String;
  status_lte?: String;
  status_gt?: String;
  status_gte?: String;
  status_contains?: String;
  status_not_contains?: String;
  status_starts_with?: String;
  status_not_starts_with?: String;
  status_ends_with?: String;
  status_not_ends_with?: String;
  AND?: NflPlayerScalarWhereInput[] | NflPlayerScalarWhereInput;
  OR?: NflPlayerScalarWhereInput[] | NflPlayerScalarWhereInput;
  NOT?: NflPlayerScalarWhereInput[] | NflPlayerScalarWhereInput;
}

export interface UserUpdateInput {
  username?: String;
  passwordHash?: String;
  leagues?: LeagueUpdateManyWithoutOwner_userInput;
}

export interface NflPlayerUpdateManyWithWhereNestedInput {
  where: NflPlayerScalarWhereInput;
  data: NflPlayerUpdateManyDataInput;
}

export interface NflTeamUpdateInput {
  city?: String;
  code?: String;
  full_name?: String;
  name?: String;
  nfl_feed_id?: String;
  nfl_players?: NflPlayerUpdateManyWithoutNfl_teamInput;
}

export interface NflPlayerUpdateManyDataInput {
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: Int;
  position?: String;
  position_group?: String;
  status?: String;
}

export type LeagueLineupWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface NflTeamUpsertNestedInput {
  update: NflTeamUpdateDataInput;
  create: NflTeamCreateInput;
}

export interface NflGameUpdateManyMutationInput {
  week?: Int;
  season?: Int;
  nfl_feed_id?: Int;
  nfl_feed_key?: Int;
  start?: DateTimeInput;
  season_type?: GameSeasonType;
}

export interface NflGameUpsertNestedInput {
  update: NflGameUpdateDataInput;
  create: NflGameCreateInput;
}

export type LeagueMemberWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface NflPlayerUpdateOneRequiredInput {
  create?: NflPlayerCreateInput;
  update?: NflPlayerUpdateDataInput;
  upsert?: NflPlayerUpsertNestedInput;
  connect?: NflPlayerWhereUniqueInput;
}

export interface LineupUpdateWithoutLineup_playersDataInput {
  leagues?: LeagueUpdateManyInput;
  name?: String;
  owner_user?: UserUpdateOneRequiredInput;
  nfl_game?: NflGameUpdateOneRequiredInput;
}

export interface NflPlayerUpdateDataInput {
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: Int;
  nfl_team?: NflTeamUpdateOneRequiredWithoutNfl_playersInput;
  position?: String;
  position_group?: String;
  status?: String;
}

export type LineupWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface NflTeamUpdateOneRequiredWithoutNfl_playersInput {
  create?: NflTeamCreateWithoutNfl_playersInput;
  update?: NflTeamUpdateWithoutNfl_playersDataInput;
  upsert?: NflTeamUpsertWithoutNfl_playersInput;
  connect?: NflTeamWhereUniqueInput;
}

export interface LineupPlayerUpdateInput {
  nfl_player?: NflPlayerUpdateOneRequiredInput;
  lineup?: LineupUpdateOneRequiredWithoutLineup_playersInput;
}

export interface NflTeamUpdateWithoutNfl_playersDataInput {
  city?: String;
  code?: String;
  full_name?: String;
  name?: String;
  nfl_feed_id?: String;
}

export interface LineupCreateOneWithoutLineup_playersInput {
  create?: LineupCreateWithoutLineup_playersInput;
  connect?: LineupWhereUniqueInput;
}

export interface NflTeamUpsertWithoutNfl_playersInput {
  update: NflTeamUpdateWithoutNfl_playersDataInput;
  create: NflTeamCreateWithoutNfl_playersInput;
}

export interface LineupPlayerCreateInput {
  nfl_player: NflPlayerCreateOneInput;
  lineup: LineupCreateOneWithoutLineup_playersInput;
}

export interface NflPlayerUpsertNestedInput {
  update: NflPlayerUpdateDataInput;
  create: NflPlayerCreateInput;
}

export interface LineupUpdateInput {
  leagues?: LeagueUpdateManyInput;
  name?: String;
  lineup_players?: LineupPlayerUpdateManyWithoutLineupInput;
  owner_user?: UserUpdateOneRequiredInput;
  nfl_game?: NflGameUpdateOneRequiredInput;
}

export interface FlipGamePlayerUpdateManyMutationInput {
  position?: FlipPosition;
  projected_score?: Float;
}

export interface LeagueUpsertWithoutLeague_membersInput {
  update: LeagueUpdateWithoutLeague_membersDataInput;
  create: LeagueCreateWithoutLeague_membersInput;
}

export interface LeagueLineupUpsertWithWhereUniqueWithoutLeagueInput {
  where: LeagueLineupWhereUniqueInput;
  update: LeagueLineupUpdateWithoutLeagueDataInput;
  create: LeagueLineupCreateWithoutLeagueInput;
}

export interface LeagueUpdateOneRequiredWithoutLeague_membersInput {
  create?: LeagueCreateWithoutLeague_membersInput;
  update?: LeagueUpdateWithoutLeague_membersDataInput;
  upsert?: LeagueUpsertWithoutLeague_membersInput;
  connect?: LeagueWhereUniqueInput;
}

export interface LineupUpsertNestedInput {
  update: LineupUpdateDataInput;
  create: LineupCreateInput;
}

export type NflPlayerWhereUniqueInput = AtLeastOne<{
  id: Int;
  nfl_feed_id?: Int;
}>;

export interface LineupPlayerScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  AND?: LineupPlayerScalarWhereInput[] | LineupPlayerScalarWhereInput;
  OR?: LineupPlayerScalarWhereInput[] | LineupPlayerScalarWhereInput;
  NOT?: LineupPlayerScalarWhereInput[] | LineupPlayerScalarWhereInput;
}

export interface LeagueCreateOneWithoutLeague_membersInput {
  create?: LeagueCreateWithoutLeague_membersInput;
  connect?: LeagueWhereUniqueInput;
}

export interface LeagueLineupCreateManyWithoutLeagueInput {
  create?:
    | LeagueLineupCreateWithoutLeagueInput[]
    | LeagueLineupCreateWithoutLeagueInput;
  connect?: LeagueLineupWhereUniqueInput[] | LeagueLineupWhereUniqueInput;
}

export type NflTeamWhereUniqueInput = AtLeastOne<{
  id: Int;
  nfl_feed_id?: String;
}>;

export interface LeagueLineupCreateWithoutLeagueInput {
  lineup: LineupCreateOneInput;
}

export interface LeagueUpdateWithoutLeague_lineupsDataInput {
  name?: String;
  league_members?: LeagueMemberUpdateManyWithoutLeagueInput;
  owner_user?: UserUpdateOneRequiredWithoutLeaguesInput;
}

export interface LineupCreateOneInput {
  create?: LineupCreateInput;
  connect?: LineupWhereUniqueInput;
}

export interface LeagueLineupUpdateInput {
  lineup?: LineupUpdateOneRequiredInput;
  league?: LeagueUpdateOneRequiredWithoutLeague_lineupsInput;
}

export interface LineupCreateInput {
  leagues?: LeagueCreateManyInput;
  name: String;
  lineup_players?: LineupPlayerCreateManyWithoutLineupInput;
  owner_user: UserCreateOneInput;
  nfl_game: NflGameCreateOneInput;
}

export interface LeagueCreateWithoutLeague_lineupsInput {
  name: String;
  league_members?: LeagueMemberCreateManyWithoutLeagueInput;
  owner_user: UserCreateOneWithoutLeaguesInput;
}

export interface LeagueCreateManyInput {
  create?: LeagueCreateInput[] | LeagueCreateInput;
  connect?: LeagueWhereUniqueInput[] | LeagueWhereUniqueInput;
}

export interface LeagueLineupCreateInput {
  lineup: LineupCreateOneInput;
  league: LeagueCreateOneWithoutLeague_lineupsInput;
}

export interface LineupPlayerCreateManyWithoutLineupInput {
  create?:
    | LineupPlayerCreateWithoutLineupInput[]
    | LineupPlayerCreateWithoutLineupInput;
  connect?: LineupPlayerWhereUniqueInput[] | LineupPlayerWhereUniqueInput;
}

export interface LeagueLineupScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  AND?: LeagueLineupScalarWhereInput[] | LeagueLineupScalarWhereInput;
  OR?: LeagueLineupScalarWhereInput[] | LeagueLineupScalarWhereInput;
  NOT?: LeagueLineupScalarWhereInput[] | LeagueLineupScalarWhereInput;
}

export interface LineupPlayerCreateWithoutLineupInput {
  nfl_player: NflPlayerCreateOneInput;
}

export interface FlipGamePlayerCreateInput {
  game: NflGameCreateOneInput;
  team: NflTeamCreateOneInput;
  position: FlipPosition;
  player: NflPlayerCreateOneInput;
  projected_score?: Float;
}

export interface FlipGamePlayerWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  game?: NflGameWhereInput;
  team?: NflTeamWhereInput;
  position?: FlipPosition;
  position_not?: FlipPosition;
  position_in?: FlipPosition[] | FlipPosition;
  position_not_in?: FlipPosition[] | FlipPosition;
  player?: NflPlayerWhereInput;
  projected_score?: Float;
  projected_score_not?: Float;
  projected_score_in?: Float[] | Float;
  projected_score_not_in?: Float[] | Float;
  projected_score_lt?: Float;
  projected_score_lte?: Float;
  projected_score_gt?: Float;
  projected_score_gte?: Float;
  AND?: FlipGamePlayerWhereInput[] | FlipGamePlayerWhereInput;
  OR?: FlipGamePlayerWhereInput[] | FlipGamePlayerWhereInput;
  NOT?: FlipGamePlayerWhereInput[] | FlipGamePlayerWhereInput;
}

export interface NflGameCreateInput {
  away_team: NflTeamCreateOneInput;
  home_team: NflTeamCreateOneInput;
  week: Int;
  season: Int;
  nfl_feed_id: Int;
  nfl_feed_key: Int;
  start: DateTimeInput;
  season_type: GameSeasonType;
}

export interface LineupPlayerUpsertWithWhereUniqueWithoutLineupInput {
  where: LineupPlayerWhereUniqueInput;
  update: LineupPlayerUpdateWithoutLineupDataInput;
  create: LineupPlayerCreateWithoutLineupInput;
}

export interface NflTeamCreateInput {
  city: String;
  code: String;
  full_name: String;
  name: String;
  nfl_feed_id: String;
  nfl_players?: NflPlayerCreateManyWithoutNfl_teamInput;
}

export interface LeagueCreateManyWithoutOwner_userInput {
  create?:
    | LeagueCreateWithoutOwner_userInput[]
    | LeagueCreateWithoutOwner_userInput;
  connect?: LeagueWhereUniqueInput[] | LeagueWhereUniqueInput;
}

export interface NflPlayerCreateWithoutNfl_teamInput {
  display_name: String;
  esb_id: String;
  first_name: String;
  gsis_id?: String;
  last_name: String;
  nfl_feed_id: Int;
  position: String;
  position_group: String;
  status: String;
}

export interface LeagueCreateWithoutOwner_userInput {
  name: String;
  league_lineups?: LeagueLineupCreateManyWithoutLeagueInput;
  league_members?: LeagueMemberCreateManyWithoutLeagueInput;
}

export interface NflPlayerCreateInput {
  display_name: String;
  esb_id: String;
  first_name: String;
  gsis_id?: String;
  last_name: String;
  nfl_feed_id: Int;
  nfl_team: NflTeamCreateOneWithoutNfl_playersInput;
  position: String;
  position_group: String;
  status: String;
}

export interface LeagueMemberCreateManyWithoutLeagueInput {
  create?:
    | LeagueMemberCreateWithoutLeagueInput[]
    | LeagueMemberCreateWithoutLeagueInput;
  connect?: LeagueMemberWhereUniqueInput[] | LeagueMemberWhereUniqueInput;
}

export interface NflPlayerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NflPlayerWhereInput;
  AND?: NflPlayerSubscriptionWhereInput[] | NflPlayerSubscriptionWhereInput;
  OR?: NflPlayerSubscriptionWhereInput[] | NflPlayerSubscriptionWhereInput;
  NOT?: NflPlayerSubscriptionWhereInput[] | NflPlayerSubscriptionWhereInput;
}

export interface LeagueMemberCreateWithoutLeagueInput {
  member_user: UserCreateOneInput;
}

export interface LineupWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  leagues_every?: LeagueWhereInput;
  leagues_some?: LeagueWhereInput;
  leagues_none?: LeagueWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  lineup_players_every?: LineupPlayerWhereInput;
  lineup_players_some?: LineupPlayerWhereInput;
  lineup_players_none?: LineupPlayerWhereInput;
  owner_user?: UserWhereInput;
  nfl_game?: NflGameWhereInput;
  AND?: LineupWhereInput[] | LineupWhereInput;
  OR?: LineupWhereInput[] | LineupWhereInput;
  NOT?: LineupWhereInput[] | LineupWhereInput;
}

export interface UserCreateOneWithoutLeaguesInput {
  create?: UserCreateWithoutLeaguesInput;
  connect?: UserWhereUniqueInput;
}

export interface LineupPlayerWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  nfl_player?: NflPlayerWhereInput;
  lineup?: LineupWhereInput;
  AND?: LineupPlayerWhereInput[] | LineupPlayerWhereInput;
  OR?: LineupPlayerWhereInput[] | LineupPlayerWhereInput;
  NOT?: LineupPlayerWhereInput[] | LineupPlayerWhereInput;
}

export interface UserCreateWithoutLeaguesInput {
  username: String;
  passwordHash: String;
}

export interface LeagueLineupSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LeagueLineupWhereInput;
  AND?:
    | LeagueLineupSubscriptionWhereInput[]
    | LeagueLineupSubscriptionWhereInput;
  OR?:
    | LeagueLineupSubscriptionWhereInput[]
    | LeagueLineupSubscriptionWhereInput;
  NOT?:
    | LeagueLineupSubscriptionWhereInput[]
    | LeagueLineupSubscriptionWhereInput;
}

export interface LeagueUpdateInput {
  name?: String;
  league_lineups?: LeagueLineupUpdateManyWithoutLeagueInput;
  league_members?: LeagueMemberUpdateManyWithoutLeagueInput;
  owner_user?: UserUpdateOneRequiredWithoutLeaguesInput;
}

export interface NflTeamWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  full_name?: String;
  full_name_not?: String;
  full_name_in?: String[] | String;
  full_name_not_in?: String[] | String;
  full_name_lt?: String;
  full_name_lte?: String;
  full_name_gt?: String;
  full_name_gte?: String;
  full_name_contains?: String;
  full_name_not_contains?: String;
  full_name_starts_with?: String;
  full_name_not_starts_with?: String;
  full_name_ends_with?: String;
  full_name_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  nfl_feed_id?: String;
  nfl_feed_id_not?: String;
  nfl_feed_id_in?: String[] | String;
  nfl_feed_id_not_in?: String[] | String;
  nfl_feed_id_lt?: String;
  nfl_feed_id_lte?: String;
  nfl_feed_id_gt?: String;
  nfl_feed_id_gte?: String;
  nfl_feed_id_contains?: String;
  nfl_feed_id_not_contains?: String;
  nfl_feed_id_starts_with?: String;
  nfl_feed_id_not_starts_with?: String;
  nfl_feed_id_ends_with?: String;
  nfl_feed_id_not_ends_with?: String;
  nfl_players_every?: NflPlayerWhereInput;
  nfl_players_some?: NflPlayerWhereInput;
  nfl_players_none?: NflPlayerWhereInput;
  AND?: NflTeamWhereInput[] | NflTeamWhereInput;
  OR?: NflTeamWhereInput[] | NflTeamWhereInput;
  NOT?: NflTeamWhereInput[] | NflTeamWhereInput;
}

export interface LeagueLineupUpdateManyWithoutLeagueInput {
  create?:
    | LeagueLineupCreateWithoutLeagueInput[]
    | LeagueLineupCreateWithoutLeagueInput;
  delete?: LeagueLineupWhereUniqueInput[] | LeagueLineupWhereUniqueInput;
  connect?: LeagueLineupWhereUniqueInput[] | LeagueLineupWhereUniqueInput;
  disconnect?: LeagueLineupWhereUniqueInput[] | LeagueLineupWhereUniqueInput;
  update?:
    | LeagueLineupUpdateWithWhereUniqueWithoutLeagueInput[]
    | LeagueLineupUpdateWithWhereUniqueWithoutLeagueInput;
  upsert?:
    | LeagueLineupUpsertWithWhereUniqueWithoutLeagueInput[]
    | LeagueLineupUpsertWithWhereUniqueWithoutLeagueInput;
  deleteMany?: LeagueLineupScalarWhereInput[] | LeagueLineupScalarWhereInput;
}

export interface NflPlayerUpdateManyMutationInput {
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: Int;
  position?: String;
  position_group?: String;
  status?: String;
}

export interface LeagueLineupUpdateWithWhereUniqueWithoutLeagueInput {
  where: LeagueLineupWhereUniqueInput;
  data: LeagueLineupUpdateWithoutLeagueDataInput;
}

export interface NflGameUpdateInput {
  away_team?: NflTeamUpdateOneRequiredInput;
  home_team?: NflTeamUpdateOneRequiredInput;
  week?: Int;
  season?: Int;
  nfl_feed_id?: Int;
  nfl_feed_key?: Int;
  start?: DateTimeInput;
  season_type?: GameSeasonType;
}

export interface LeagueLineupUpdateWithoutLeagueDataInput {
  lineup?: LineupUpdateOneRequiredInput;
}

export interface LineupUpdateOneRequiredWithoutLineup_playersInput {
  create?: LineupCreateWithoutLineup_playersInput;
  update?: LineupUpdateWithoutLineup_playersDataInput;
  upsert?: LineupUpsertWithoutLineup_playersInput;
  connect?: LineupWhereUniqueInput;
}

export interface LineupUpdateOneRequiredInput {
  create?: LineupCreateInput;
  update?: LineupUpdateDataInput;
  upsert?: LineupUpsertNestedInput;
  connect?: LineupWhereUniqueInput;
}

export interface LineupCreateWithoutLineup_playersInput {
  leagues?: LeagueCreateManyInput;
  name: String;
  owner_user: UserCreateOneInput;
  nfl_game: NflGameCreateOneInput;
}

export interface LineupUpdateDataInput {
  leagues?: LeagueUpdateManyInput;
  name?: String;
  lineup_players?: LineupPlayerUpdateManyWithoutLineupInput;
  owner_user?: UserUpdateOneRequiredInput;
  nfl_game?: NflGameUpdateOneRequiredInput;
}

export interface LineupUpdateManyMutationInput {
  name?: String;
}

export interface LeagueUpdateManyInput {
  create?: LeagueCreateInput[] | LeagueCreateInput;
  update?:
    | LeagueUpdateWithWhereUniqueNestedInput[]
    | LeagueUpdateWithWhereUniqueNestedInput;
  upsert?:
    | LeagueUpsertWithWhereUniqueNestedInput[]
    | LeagueUpsertWithWhereUniqueNestedInput;
  delete?: LeagueWhereUniqueInput[] | LeagueWhereUniqueInput;
  connect?: LeagueWhereUniqueInput[] | LeagueWhereUniqueInput;
  disconnect?: LeagueWhereUniqueInput[] | LeagueWhereUniqueInput;
  deleteMany?: LeagueScalarWhereInput[] | LeagueScalarWhereInput;
  updateMany?:
    | LeagueUpdateManyWithWhereNestedInput[]
    | LeagueUpdateManyWithWhereNestedInput;
}

export interface LeagueUpdateWithoutLeague_membersDataInput {
  name?: String;
  league_lineups?: LeagueLineupUpdateManyWithoutLeagueInput;
  owner_user?: UserUpdateOneRequiredWithoutLeaguesInput;
}

export interface LeagueUpdateWithWhereUniqueNestedInput {
  where: LeagueWhereUniqueInput;
  data: LeagueUpdateDataInput;
}

export interface LeagueCreateWithoutLeague_membersInput {
  name: String;
  league_lineups?: LeagueLineupCreateManyWithoutLeagueInput;
  owner_user: UserCreateOneWithoutLeaguesInput;
}

export interface LeagueUpdateDataInput {
  name?: String;
  league_lineups?: LeagueLineupUpdateManyWithoutLeagueInput;
  league_members?: LeagueMemberUpdateManyWithoutLeagueInput;
  owner_user?: UserUpdateOneRequiredWithoutLeaguesInput;
}

export interface LeagueUpsertWithoutLeague_lineupsInput {
  update: LeagueUpdateWithoutLeague_lineupsDataInput;
  create: LeagueCreateWithoutLeague_lineupsInput;
}

export interface LeagueMemberUpdateManyWithoutLeagueInput {
  create?:
    | LeagueMemberCreateWithoutLeagueInput[]
    | LeagueMemberCreateWithoutLeagueInput;
  delete?: LeagueMemberWhereUniqueInput[] | LeagueMemberWhereUniqueInput;
  connect?: LeagueMemberWhereUniqueInput[] | LeagueMemberWhereUniqueInput;
  disconnect?: LeagueMemberWhereUniqueInput[] | LeagueMemberWhereUniqueInput;
  update?:
    | LeagueMemberUpdateWithWhereUniqueWithoutLeagueInput[]
    | LeagueMemberUpdateWithWhereUniqueWithoutLeagueInput;
  upsert?:
    | LeagueMemberUpsertWithWhereUniqueWithoutLeagueInput[]
    | LeagueMemberUpsertWithWhereUniqueWithoutLeagueInput;
  deleteMany?: LeagueMemberScalarWhereInput[] | LeagueMemberScalarWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Int;
  username?: String;
}>;

export interface LeagueMemberUpdateWithWhereUniqueWithoutLeagueInput {
  where: LeagueMemberWhereUniqueInput;
  data: LeagueMemberUpdateWithoutLeagueDataInput;
}

export interface LeagueUpdateManyMutationInput {
  name?: String;
}

export interface LeagueMemberUpdateWithoutLeagueDataInput {
  member_user?: UserUpdateOneRequiredInput;
}

export interface NflGameCreateOneInput {
  create?: NflGameCreateInput;
  connect?: NflGameWhereUniqueInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface NflPlayerCreateManyWithoutNfl_teamInput {
  create?:
    | NflPlayerCreateWithoutNfl_teamInput[]
    | NflPlayerCreateWithoutNfl_teamInput;
  connect?: NflPlayerWhereUniqueInput[] | NflPlayerWhereUniqueInput;
}

export interface UserUpdateDataInput {
  username?: String;
  passwordHash?: String;
  leagues?: LeagueUpdateManyWithoutOwner_userInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface LeagueUpdateManyWithoutOwner_userInput {
  create?:
    | LeagueCreateWithoutOwner_userInput[]
    | LeagueCreateWithoutOwner_userInput;
  delete?: LeagueWhereUniqueInput[] | LeagueWhereUniqueInput;
  connect?: LeagueWhereUniqueInput[] | LeagueWhereUniqueInput;
  disconnect?: LeagueWhereUniqueInput[] | LeagueWhereUniqueInput;
  update?:
    | LeagueUpdateWithWhereUniqueWithoutOwner_userInput[]
    | LeagueUpdateWithWhereUniqueWithoutOwner_userInput;
  upsert?:
    | LeagueUpsertWithWhereUniqueWithoutOwner_userInput[]
    | LeagueUpsertWithWhereUniqueWithoutOwner_userInput;
  deleteMany?: LeagueScalarWhereInput[] | LeagueScalarWhereInput;
  updateMany?:
    | LeagueUpdateManyWithWhereNestedInput[]
    | LeagueUpdateManyWithWhereNestedInput;
}

export interface LeagueMemberWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  league?: LeagueWhereInput;
  member_user?: UserWhereInput;
  AND?: LeagueMemberWhereInput[] | LeagueMemberWhereInput;
  OR?: LeagueMemberWhereInput[] | LeagueMemberWhereInput;
  NOT?: LeagueMemberWhereInput[] | LeagueMemberWhereInput;
}

export interface LeagueUpdateWithWhereUniqueWithoutOwner_userInput {
  where: LeagueWhereUniqueInput;
  data: LeagueUpdateWithoutOwner_userDataInput;
}

export interface FlipGamePlayerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FlipGamePlayerWhereInput;
  AND?:
    | FlipGamePlayerSubscriptionWhereInput[]
    | FlipGamePlayerSubscriptionWhereInput;
  OR?:
    | FlipGamePlayerSubscriptionWhereInput[]
    | FlipGamePlayerSubscriptionWhereInput;
  NOT?:
    | FlipGamePlayerSubscriptionWhereInput[]
    | FlipGamePlayerSubscriptionWhereInput;
}

export interface LeagueUpdateWithoutOwner_userDataInput {
  name?: String;
  league_lineups?: LeagueLineupUpdateManyWithoutLeagueInput;
  league_members?: LeagueMemberUpdateManyWithoutLeagueInput;
}

export interface NflPlayerUpdateInput {
  display_name?: String;
  esb_id?: String;
  first_name?: String;
  gsis_id?: String;
  last_name?: String;
  nfl_feed_id?: Int;
  nfl_team?: NflTeamUpdateOneRequiredWithoutNfl_playersInput;
  position?: String;
  position_group?: String;
  status?: String;
}

export interface LeagueUpsertWithWhereUniqueWithoutOwner_userInput {
  where: LeagueWhereUniqueInput;
  update: LeagueUpdateWithoutOwner_userDataInput;
  create: LeagueCreateWithoutOwner_userInput;
}

export interface NflPlayerWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  display_name?: String;
  display_name_not?: String;
  display_name_in?: String[] | String;
  display_name_not_in?: String[] | String;
  display_name_lt?: String;
  display_name_lte?: String;
  display_name_gt?: String;
  display_name_gte?: String;
  display_name_contains?: String;
  display_name_not_contains?: String;
  display_name_starts_with?: String;
  display_name_not_starts_with?: String;
  display_name_ends_with?: String;
  display_name_not_ends_with?: String;
  esb_id?: String;
  esb_id_not?: String;
  esb_id_in?: String[] | String;
  esb_id_not_in?: String[] | String;
  esb_id_lt?: String;
  esb_id_lte?: String;
  esb_id_gt?: String;
  esb_id_gte?: String;
  esb_id_contains?: String;
  esb_id_not_contains?: String;
  esb_id_starts_with?: String;
  esb_id_not_starts_with?: String;
  esb_id_ends_with?: String;
  esb_id_not_ends_with?: String;
  first_name?: String;
  first_name_not?: String;
  first_name_in?: String[] | String;
  first_name_not_in?: String[] | String;
  first_name_lt?: String;
  first_name_lte?: String;
  first_name_gt?: String;
  first_name_gte?: String;
  first_name_contains?: String;
  first_name_not_contains?: String;
  first_name_starts_with?: String;
  first_name_not_starts_with?: String;
  first_name_ends_with?: String;
  first_name_not_ends_with?: String;
  gsis_id?: String;
  gsis_id_not?: String;
  gsis_id_in?: String[] | String;
  gsis_id_not_in?: String[] | String;
  gsis_id_lt?: String;
  gsis_id_lte?: String;
  gsis_id_gt?: String;
  gsis_id_gte?: String;
  gsis_id_contains?: String;
  gsis_id_not_contains?: String;
  gsis_id_starts_with?: String;
  gsis_id_not_starts_with?: String;
  gsis_id_ends_with?: String;
  gsis_id_not_ends_with?: String;
  last_name?: String;
  last_name_not?: String;
  last_name_in?: String[] | String;
  last_name_not_in?: String[] | String;
  last_name_lt?: String;
  last_name_lte?: String;
  last_name_gt?: String;
  last_name_gte?: String;
  last_name_contains?: String;
  last_name_not_contains?: String;
  last_name_starts_with?: String;
  last_name_not_starts_with?: String;
  last_name_ends_with?: String;
  last_name_not_ends_with?: String;
  nfl_feed_id?: Int;
  nfl_feed_id_not?: Int;
  nfl_feed_id_in?: Int[] | Int;
  nfl_feed_id_not_in?: Int[] | Int;
  nfl_feed_id_lt?: Int;
  nfl_feed_id_lte?: Int;
  nfl_feed_id_gt?: Int;
  nfl_feed_id_gte?: Int;
  nfl_team?: NflTeamWhereInput;
  position?: String;
  position_not?: String;
  position_in?: String[] | String;
  position_not_in?: String[] | String;
  position_lt?: String;
  position_lte?: String;
  position_gt?: String;
  position_gte?: String;
  position_contains?: String;
  position_not_contains?: String;
  position_starts_with?: String;
  position_not_starts_with?: String;
  position_ends_with?: String;
  position_not_ends_with?: String;
  position_group?: String;
  position_group_not?: String;
  position_group_in?: String[] | String;
  position_group_not_in?: String[] | String;
  position_group_lt?: String;
  position_group_lte?: String;
  position_group_gt?: String;
  position_group_gte?: String;
  position_group_contains?: String;
  position_group_not_contains?: String;
  position_group_starts_with?: String;
  position_group_not_starts_with?: String;
  position_group_ends_with?: String;
  position_group_not_ends_with?: String;
  status?: String;
  status_not?: String;
  status_in?: String[] | String;
  status_not_in?: String[] | String;
  status_lt?: String;
  status_lte?: String;
  status_gt?: String;
  status_gte?: String;
  status_contains?: String;
  status_not_contains?: String;
  status_starts_with?: String;
  status_not_starts_with?: String;
  status_ends_with?: String;
  status_not_ends_with?: String;
  AND?: NflPlayerWhereInput[] | NflPlayerWhereInput;
  OR?: NflPlayerWhereInput[] | NflPlayerWhereInput;
  NOT?: NflPlayerWhereInput[] | NflPlayerWhereInput;
}

export interface LeagueScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: LeagueScalarWhereInput[] | LeagueScalarWhereInput;
  OR?: LeagueScalarWhereInput[] | LeagueScalarWhereInput;
  NOT?: LeagueScalarWhereInput[] | LeagueScalarWhereInput;
}

export type NflGameWhereUniqueInput = AtLeastOne<{
  id: Int;
  nfl_feed_id?: Int;
  nfl_feed_key?: Int;
}>;

export interface LeagueUpdateManyWithWhereNestedInput {
  where: LeagueScalarWhereInput;
  data: LeagueUpdateManyDataInput;
}

export interface LeagueMemberCreateInput {
  league: LeagueCreateOneWithoutLeague_membersInput;
  member_user: UserCreateOneInput;
}

export interface LeagueUpdateManyDataInput {
  name?: String;
}

export interface LeagueCreateOneWithoutLeague_lineupsInput {
  create?: LeagueCreateWithoutLeague_lineupsInput;
  connect?: LeagueWhereUniqueInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface NflTeamCreateOneInput {
  create?: NflTeamCreateInput;
  connect?: NflTeamWhereUniqueInput;
}

export interface LeagueMemberUpsertWithWhereUniqueWithoutLeagueInput {
  where: LeagueMemberWhereUniqueInput;
  update: LeagueMemberUpdateWithoutLeagueDataInput;
  create: LeagueMemberCreateWithoutLeagueInput;
}

export interface NflGameSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: NflGameWhereInput;
  AND?: NflGameSubscriptionWhereInput[] | NflGameSubscriptionWhereInput;
  OR?: NflGameSubscriptionWhereInput[] | NflGameSubscriptionWhereInput;
  NOT?: NflGameSubscriptionWhereInput[] | NflGameSubscriptionWhereInput;
}

export interface LeagueMemberScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  AND?: LeagueMemberScalarWhereInput[] | LeagueMemberScalarWhereInput;
  OR?: LeagueMemberScalarWhereInput[] | LeagueMemberScalarWhereInput;
  NOT?: LeagueMemberScalarWhereInput[] | LeagueMemberScalarWhereInput;
}

export interface NflTeamUpdateManyMutationInput {
  city?: String;
  code?: String;
  full_name?: String;
  name?: String;
  nfl_feed_id?: String;
}

export interface UserUpdateOneRequiredWithoutLeaguesInput {
  create?: UserCreateWithoutLeaguesInput;
  update?: UserUpdateWithoutLeaguesDataInput;
  upsert?: UserUpsertWithoutLeaguesInput;
  connect?: UserWhereUniqueInput;
}

export type LineupPlayerWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface UserUpdateWithoutLeaguesDataInput {
  username?: String;
  passwordHash?: String;
}

export interface LeagueUpdateOneRequiredWithoutLeague_lineupsInput {
  create?: LeagueCreateWithoutLeague_lineupsInput;
  update?: LeagueUpdateWithoutLeague_lineupsDataInput;
  upsert?: LeagueUpsertWithoutLeague_lineupsInput;
  connect?: LeagueWhereUniqueInput;
}

export interface NflPlayerCreateOneInput {
  create?: NflPlayerCreateInput;
  connect?: NflPlayerWhereUniqueInput;
}

export interface LineupPlayerUpdateWithWhereUniqueWithoutLineupInput {
  where: LineupPlayerWhereUniqueInput;
  data: LineupPlayerUpdateWithoutLineupDataInput;
}

export interface LineupPlayerUpdateManyWithoutLineupInput {
  create?:
    | LineupPlayerCreateWithoutLineupInput[]
    | LineupPlayerCreateWithoutLineupInput;
  delete?: LineupPlayerWhereUniqueInput[] | LineupPlayerWhereUniqueInput;
  connect?: LineupPlayerWhereUniqueInput[] | LineupPlayerWhereUniqueInput;
  disconnect?: LineupPlayerWhereUniqueInput[] | LineupPlayerWhereUniqueInput;
  update?:
    | LineupPlayerUpdateWithWhereUniqueWithoutLineupInput[]
    | LineupPlayerUpdateWithWhereUniqueWithoutLineupInput;
  upsert?:
    | LineupPlayerUpsertWithWhereUniqueWithoutLineupInput[]
    | LineupPlayerUpsertWithWhereUniqueWithoutLineupInput;
  deleteMany?: LineupPlayerScalarWhereInput[] | LineupPlayerScalarWhereInput;
}

export interface LeagueUpsertWithWhereUniqueNestedInput {
  where: LeagueWhereUniqueInput;
  update: LeagueUpdateDataInput;
  create: LeagueCreateInput;
}

export interface UserUpsertWithoutLeaguesInput {
  update: UserUpdateWithoutLeaguesDataInput;
  create: UserCreateWithoutLeaguesInput;
}

export interface LineupSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LineupWhereInput;
  AND?: LineupSubscriptionWhereInput[] | LineupSubscriptionWhereInput;
  OR?: LineupSubscriptionWhereInput[] | LineupSubscriptionWhereInput;
  NOT?: LineupSubscriptionWhereInput[] | LineupSubscriptionWhereInput;
}

export interface LeagueMemberUpdateInput {
  league?: LeagueUpdateOneRequiredWithoutLeague_membersInput;
  member_user?: UserUpdateOneRequiredInput;
}

export interface LineupUpsertWithoutLineup_playersInput {
  update: LineupUpdateWithoutLineup_playersDataInput;
  create: LineupCreateWithoutLineup_playersInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: Int;
  username: String;
  passwordHash: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  username: () => Promise<String>;
  passwordHash: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  username: () => Promise<AsyncIterator<String>>;
  passwordHash: () => Promise<AsyncIterator<String>>;
}

export interface LeagueConnection {}

export interface LeagueConnectionPromise
  extends Promise<LeagueConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LeagueEdge>>() => T;
  aggregate: <T = AggregateLeaguePromise>() => T;
}

export interface LeagueConnectionSubscription
  extends Promise<AsyncIterator<LeagueConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LeagueEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLeagueSubscription>() => T;
}

export interface FlipGamePlayerConnection {}

export interface FlipGamePlayerConnectionPromise
  extends Promise<FlipGamePlayerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FlipGamePlayerEdge>>() => T;
  aggregate: <T = AggregateFlipGamePlayerPromise>() => T;
}

export interface FlipGamePlayerConnectionSubscription
  extends Promise<AsyncIterator<FlipGamePlayerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FlipGamePlayerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFlipGamePlayerSubscription>() => T;
}

export interface LeagueMember {
  id: Int;
}

export interface LeagueMemberPromise
  extends Promise<LeagueMember>,
    Fragmentable {
  id: () => Promise<Int>;
  league: <T = LeaguePromise>() => T;
  member_user: <T = UserPromise>() => T;
}

export interface LeagueMemberSubscription
  extends Promise<AsyncIterator<LeagueMember>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  league: <T = LeagueSubscription>() => T;
  member_user: <T = UserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface LeagueEdge {
  cursor: String;
}

export interface LeagueEdgePromise extends Promise<LeagueEdge>, Fragmentable {
  node: <T = LeaguePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LeagueEdgeSubscription
  extends Promise<AsyncIterator<LeagueEdge>>,
    Fragmentable {
  node: <T = LeagueSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NflPlayerPreviousValues {
  id: Int;
  display_name: String;
  esb_id: String;
  first_name: String;
  gsis_id?: String;
  last_name: String;
  nfl_feed_id: Int;
  position: String;
  position_group: String;
  status: String;
}

export interface NflPlayerPreviousValuesPromise
  extends Promise<NflPlayerPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  display_name: () => Promise<String>;
  esb_id: () => Promise<String>;
  first_name: () => Promise<String>;
  gsis_id: () => Promise<String>;
  last_name: () => Promise<String>;
  nfl_feed_id: () => Promise<Int>;
  position: () => Promise<String>;
  position_group: () => Promise<String>;
  status: () => Promise<String>;
}

export interface NflPlayerPreviousValuesSubscription
  extends Promise<AsyncIterator<NflPlayerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  display_name: () => Promise<AsyncIterator<String>>;
  esb_id: () => Promise<AsyncIterator<String>>;
  first_name: () => Promise<AsyncIterator<String>>;
  gsis_id: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  nfl_feed_id: () => Promise<AsyncIterator<Int>>;
  position: () => Promise<AsyncIterator<String>>;
  position_group: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
}

export interface NflTeamPreviousValues {
  id: Int;
  city: String;
  code: String;
  full_name: String;
  name: String;
  nfl_feed_id: String;
}

export interface NflTeamPreviousValuesPromise
  extends Promise<NflTeamPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  city: () => Promise<String>;
  code: () => Promise<String>;
  full_name: () => Promise<String>;
  name: () => Promise<String>;
  nfl_feed_id: () => Promise<String>;
}

export interface NflTeamPreviousValuesSubscription
  extends Promise<AsyncIterator<NflTeamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  city: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  full_name: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  nfl_feed_id: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: Int;
  username: String;
  passwordHash: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<Int>;
  username: () => Promise<String>;
  passwordHash: () => Promise<String>;
  leagues: <T = FragmentableArray<League>>(
    args?: {
      where?: LeagueWhereInput;
      orderBy?: LeagueOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  username: () => Promise<AsyncIterator<String>>;
  passwordHash: () => Promise<AsyncIterator<String>>;
  leagues: <T = Promise<AsyncIterator<LeagueSubscription>>>(
    args?: {
      where?: LeagueWhereInput;
      orderBy?: LeagueOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateNflTeam {
  count: Int;
}

export interface AggregateNflTeamPromise
  extends Promise<AggregateNflTeam>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNflTeamSubscription
  extends Promise<AsyncIterator<AggregateNflTeam>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LineupPlayer {
  id: Int;
}

export interface LineupPlayerPromise
  extends Promise<LineupPlayer>,
    Fragmentable {
  id: () => Promise<Int>;
  nfl_player: <T = NflPlayerPromise>() => T;
  lineup: <T = LineupPromise>() => T;
}

export interface LineupPlayerSubscription
  extends Promise<AsyncIterator<LineupPlayer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  nfl_player: <T = NflPlayerSubscription>() => T;
  lineup: <T = LineupSubscription>() => T;
}

export interface NflTeamConnection {}

export interface NflTeamConnectionPromise
  extends Promise<NflTeamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NflTeamEdge>>() => T;
  aggregate: <T = AggregateNflTeamPromise>() => T;
}

export interface NflTeamConnectionSubscription
  extends Promise<AsyncIterator<NflTeamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NflTeamEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNflTeamSubscription>() => T;
}

export interface FlipGamePlayer {
  id: Int;
  position: FlipPosition;
  projected_score?: Float;
}

export interface FlipGamePlayerPromise
  extends Promise<FlipGamePlayer>,
    Fragmentable {
  id: () => Promise<Int>;
  game: <T = NflGamePromise>() => T;
  team: <T = NflTeamPromise>() => T;
  position: () => Promise<FlipPosition>;
  player: <T = NflPlayerPromise>() => T;
  projected_score: () => Promise<Float>;
}

export interface FlipGamePlayerSubscription
  extends Promise<AsyncIterator<FlipGamePlayer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  game: <T = NflGameSubscription>() => T;
  team: <T = NflTeamSubscription>() => T;
  position: () => Promise<AsyncIterator<FlipPosition>>;
  player: <T = NflPlayerSubscription>() => T;
  projected_score: () => Promise<AsyncIterator<Float>>;
}

export interface AggregateNflPlayer {
  count: Int;
}

export interface AggregateNflPlayerPromise
  extends Promise<AggregateNflPlayer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNflPlayerSubscription
  extends Promise<AsyncIterator<AggregateNflPlayer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FlipGamePlayerSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface FlipGamePlayerSubscriptionPayloadPromise
  extends Promise<FlipGamePlayerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FlipGamePlayerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FlipGamePlayerPreviousValuesPromise>() => T;
}

export interface FlipGamePlayerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FlipGamePlayerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FlipGamePlayerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FlipGamePlayerPreviousValuesSubscription>() => T;
}

export interface NflPlayerConnection {}

export interface NflPlayerConnectionPromise
  extends Promise<NflPlayerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NflPlayerEdge>>() => T;
  aggregate: <T = AggregateNflPlayerPromise>() => T;
}

export interface NflPlayerConnectionSubscription
  extends Promise<AsyncIterator<NflPlayerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NflPlayerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNflPlayerSubscription>() => T;
}

export interface FlipGamePlayerPreviousValues {
  id: Int;
  position: FlipPosition;
  projected_score?: Float;
}

export interface FlipGamePlayerPreviousValuesPromise
  extends Promise<FlipGamePlayerPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  position: () => Promise<FlipPosition>;
  projected_score: () => Promise<Float>;
}

export interface FlipGamePlayerPreviousValuesSubscription
  extends Promise<AsyncIterator<FlipGamePlayerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  position: () => Promise<AsyncIterator<FlipPosition>>;
  projected_score: () => Promise<AsyncIterator<Float>>;
}

export interface NflGameEdge {
  cursor: String;
}

export interface NflGameEdgePromise extends Promise<NflGameEdge>, Fragmentable {
  node: <T = NflGamePromise>() => T;
  cursor: () => Promise<String>;
}

export interface NflGameEdgeSubscription
  extends Promise<AsyncIterator<NflGameEdge>>,
    Fragmentable {
  node: <T = NflGameSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NflPlayer {
  id: Int;
  display_name: String;
  esb_id: String;
  first_name: String;
  gsis_id?: String;
  last_name: String;
  nfl_feed_id: Int;
  position: String;
  position_group: String;
  status: String;
}

export interface NflPlayerPromise extends Promise<NflPlayer>, Fragmentable {
  id: () => Promise<Int>;
  display_name: () => Promise<String>;
  esb_id: () => Promise<String>;
  first_name: () => Promise<String>;
  gsis_id: () => Promise<String>;
  last_name: () => Promise<String>;
  nfl_feed_id: () => Promise<Int>;
  nfl_team: <T = NflTeamPromise>() => T;
  position: () => Promise<String>;
  position_group: () => Promise<String>;
  status: () => Promise<String>;
}

export interface NflPlayerSubscription
  extends Promise<AsyncIterator<NflPlayer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  display_name: () => Promise<AsyncIterator<String>>;
  esb_id: () => Promise<AsyncIterator<String>>;
  first_name: () => Promise<AsyncIterator<String>>;
  gsis_id: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  nfl_feed_id: () => Promise<AsyncIterator<Int>>;
  nfl_team: <T = NflTeamSubscription>() => T;
  position: () => Promise<AsyncIterator<String>>;
  position_group: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface LeagueSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LeagueSubscriptionPayloadPromise
  extends Promise<LeagueSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LeaguePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LeaguePreviousValuesPromise>() => T;
}

export interface LeagueSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LeagueSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LeagueSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LeaguePreviousValuesSubscription>() => T;
}

export interface LineupPlayerEdge {
  cursor: String;
}

export interface LineupPlayerEdgePromise
  extends Promise<LineupPlayerEdge>,
    Fragmentable {
  node: <T = LineupPlayerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LineupPlayerEdgeSubscription
  extends Promise<AsyncIterator<LineupPlayerEdge>>,
    Fragmentable {
  node: <T = LineupPlayerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LeaguePreviousValues {
  id: Int;
  name: String;
}

export interface LeaguePreviousValuesPromise
  extends Promise<LeaguePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface LeaguePreviousValuesSubscription
  extends Promise<AsyncIterator<LeaguePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLineup {
  count: Int;
}

export interface AggregateLineupPromise
  extends Promise<AggregateLineup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLineupSubscription
  extends Promise<AsyncIterator<AggregateLineup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NflTeamSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface NflTeamSubscriptionPayloadPromise
  extends Promise<NflTeamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NflTeamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NflTeamPreviousValuesPromise>() => T;
}

export interface NflTeamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NflTeamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NflTeamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NflTeamPreviousValuesSubscription>() => T;
}

export interface LineupConnection {}

export interface LineupConnectionPromise
  extends Promise<LineupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LineupEdge>>() => T;
  aggregate: <T = AggregateLineupPromise>() => T;
}

export interface LineupConnectionSubscription
  extends Promise<AsyncIterator<LineupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LineupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLineupSubscription>() => T;
}

export interface LeagueLineupSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LeagueLineupSubscriptionPayloadPromise
  extends Promise<LeagueLineupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LeagueLineupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LeagueLineupPreviousValuesPromise>() => T;
}

export interface LeagueLineupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LeagueLineupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LeagueLineupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LeagueLineupPreviousValuesSubscription>() => T;
}

export interface LeagueMemberEdge {
  cursor: String;
}

export interface LeagueMemberEdgePromise
  extends Promise<LeagueMemberEdge>,
    Fragmentable {
  node: <T = LeagueMemberPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LeagueMemberEdgeSubscription
  extends Promise<AsyncIterator<LeagueMemberEdge>>,
    Fragmentable {
  node: <T = LeagueMemberSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LeagueLineupPreviousValues {
  id: Int;
}

export interface LeagueLineupPreviousValuesPromise
  extends Promise<LeagueLineupPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
}

export interface LeagueLineupPreviousValuesSubscription
  extends Promise<AsyncIterator<LeagueLineupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateLeagueLineup {
  count: Int;
}

export interface AggregateLeagueLineupPromise
  extends Promise<AggregateLeagueLineup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLeagueLineupSubscription
  extends Promise<AsyncIterator<AggregateLeagueLineup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Lineup {
  id: Int;
  name: String;
}

export interface LineupPromise extends Promise<Lineup>, Fragmentable {
  id: () => Promise<Int>;
  leagues: <T = FragmentableArray<League>>(
    args?: {
      where?: LeagueWhereInput;
      orderBy?: LeagueOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  name: () => Promise<String>;
  lineup_players: <T = FragmentableArray<LineupPlayer>>(
    args?: {
      where?: LineupPlayerWhereInput;
      orderBy?: LineupPlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  owner_user: <T = UserPromise>() => T;
  nfl_game: <T = NflGamePromise>() => T;
}

export interface LineupSubscription
  extends Promise<AsyncIterator<Lineup>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  leagues: <T = Promise<AsyncIterator<LeagueSubscription>>>(
    args?: {
      where?: LeagueWhereInput;
      orderBy?: LeagueOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  name: () => Promise<AsyncIterator<String>>;
  lineup_players: <T = Promise<AsyncIterator<LineupPlayerSubscription>>>(
    args?: {
      where?: LineupPlayerWhereInput;
      orderBy?: LineupPlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  owner_user: <T = UserSubscription>() => T;
  nfl_game: <T = NflGameSubscription>() => T;
}

export interface LeagueLineupConnection {}

export interface LeagueLineupConnectionPromise
  extends Promise<LeagueLineupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LeagueLineupEdge>>() => T;
  aggregate: <T = AggregateLeagueLineupPromise>() => T;
}

export interface LeagueLineupConnectionSubscription
  extends Promise<AsyncIterator<LeagueLineupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LeagueLineupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLeagueLineupSubscription>() => T;
}

export interface LeagueMemberSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LeagueMemberSubscriptionPayloadPromise
  extends Promise<LeagueMemberSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LeagueMemberPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LeagueMemberPreviousValuesPromise>() => T;
}

export interface LeagueMemberSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LeagueMemberSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LeagueMemberSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LeagueMemberPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LeagueMemberPreviousValues {
  id: Int;
}

export interface LeagueMemberPreviousValuesPromise
  extends Promise<LeagueMemberPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
}

export interface LeagueMemberPreviousValuesSubscription
  extends Promise<AsyncIterator<LeagueMemberPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
}

export interface NflTeamEdge {
  cursor: String;
}

export interface NflTeamEdgePromise extends Promise<NflTeamEdge>, Fragmentable {
  node: <T = NflTeamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NflTeamEdgeSubscription
  extends Promise<AsyncIterator<NflTeamEdge>>,
    Fragmentable {
  node: <T = NflTeamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LeagueLineup {
  id: Int;
}

export interface LeagueLineupPromise
  extends Promise<LeagueLineup>,
    Fragmentable {
  id: () => Promise<Int>;
  lineup: <T = LineupPromise>() => T;
  league: <T = LeaguePromise>() => T;
}

export interface LeagueLineupSubscription
  extends Promise<AsyncIterator<LeagueLineup>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  lineup: <T = LineupSubscription>() => T;
  league: <T = LeagueSubscription>() => T;
}

export interface NflPlayerEdge {
  cursor: String;
}

export interface NflPlayerEdgePromise
  extends Promise<NflPlayerEdge>,
    Fragmentable {
  node: <T = NflPlayerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NflPlayerEdgeSubscription
  extends Promise<AsyncIterator<NflPlayerEdge>>,
    Fragmentable {
  node: <T = NflPlayerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LineupSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LineupSubscriptionPayloadPromise
  extends Promise<LineupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LineupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LineupPreviousValuesPromise>() => T;
}

export interface LineupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LineupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LineupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LineupPreviousValuesSubscription>() => T;
}

export interface NflGameConnection {}

export interface NflGameConnectionPromise
  extends Promise<NflGameConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NflGameEdge>>() => T;
  aggregate: <T = AggregateNflGamePromise>() => T;
}

export interface NflGameConnectionSubscription
  extends Promise<AsyncIterator<NflGameConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NflGameEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNflGameSubscription>() => T;
}

export interface LineupPreviousValues {
  id: Int;
  name: String;
}

export interface LineupPreviousValuesPromise
  extends Promise<LineupPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface LineupPreviousValuesSubscription
  extends Promise<AsyncIterator<LineupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface LineupPlayerConnection {}

export interface LineupPlayerConnectionPromise
  extends Promise<LineupPlayerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LineupPlayerEdge>>() => T;
  aggregate: <T = AggregateLineupPlayerPromise>() => T;
}

export interface LineupPlayerConnectionSubscription
  extends Promise<AsyncIterator<LineupPlayerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LineupPlayerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLineupPlayerSubscription>() => T;
}

export interface FlipGamePlayerEdge {
  cursor: String;
}

export interface FlipGamePlayerEdgePromise
  extends Promise<FlipGamePlayerEdge>,
    Fragmentable {
  node: <T = FlipGamePlayerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FlipGamePlayerEdgeSubscription
  extends Promise<AsyncIterator<FlipGamePlayerEdge>>,
    Fragmentable {
  node: <T = FlipGamePlayerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLeagueMember {
  count: Int;
}

export interface AggregateLeagueMemberPromise
  extends Promise<AggregateLeagueMember>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLeagueMemberSubscription
  extends Promise<AsyncIterator<AggregateLeagueMember>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LineupPlayerSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LineupPlayerSubscriptionPayloadPromise
  extends Promise<LineupPlayerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LineupPlayerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LineupPlayerPreviousValuesPromise>() => T;
}

export interface LineupPlayerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LineupPlayerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LineupPlayerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LineupPlayerPreviousValuesSubscription>() => T;
}

export interface LeagueLineupEdge {
  cursor: String;
}

export interface LeagueLineupEdgePromise
  extends Promise<LeagueLineupEdge>,
    Fragmentable {
  node: <T = LeagueLineupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LeagueLineupEdgeSubscription
  extends Promise<AsyncIterator<LeagueLineupEdge>>,
    Fragmentable {
  node: <T = LeagueLineupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LineupPlayerPreviousValues {
  id: Int;
}

export interface LineupPlayerPreviousValuesPromise
  extends Promise<LineupPlayerPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
}

export interface LineupPlayerPreviousValuesSubscription
  extends Promise<AsyncIterator<LineupPlayerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
}

export interface NflGame {
  id: Int;
  week: Int;
  season: Int;
  nfl_feed_id: Int;
  nfl_feed_key: Int;
  start: DateTimeOutput;
  season_type: GameSeasonType;
}

export interface NflGamePromise extends Promise<NflGame>, Fragmentable {
  id: () => Promise<Int>;
  away_team: <T = NflTeamPromise>() => T;
  home_team: <T = NflTeamPromise>() => T;
  week: () => Promise<Int>;
  season: () => Promise<Int>;
  nfl_feed_id: () => Promise<Int>;
  nfl_feed_key: () => Promise<Int>;
  start: () => Promise<DateTimeOutput>;
  season_type: () => Promise<GameSeasonType>;
}

export interface NflGameSubscription
  extends Promise<AsyncIterator<NflGame>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  away_team: <T = NflTeamSubscription>() => T;
  home_team: <T = NflTeamSubscription>() => T;
  week: () => Promise<AsyncIterator<Int>>;
  season: () => Promise<AsyncIterator<Int>>;
  nfl_feed_id: () => Promise<AsyncIterator<Int>>;
  nfl_feed_key: () => Promise<AsyncIterator<Int>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  season_type: () => Promise<AsyncIterator<GameSeasonType>>;
}

export interface League {
  id: Int;
  name: String;
}

export interface LeaguePromise extends Promise<League>, Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  league_lineups: <T = FragmentableArray<LeagueLineup>>(
    args?: {
      where?: LeagueLineupWhereInput;
      orderBy?: LeagueLineupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  league_members: <T = FragmentableArray<LeagueMember>>(
    args?: {
      where?: LeagueMemberWhereInput;
      orderBy?: LeagueMemberOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  owner_user: <T = UserPromise>() => T;
}

export interface LeagueSubscription
  extends Promise<AsyncIterator<League>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  league_lineups: <T = Promise<AsyncIterator<LeagueLineupSubscription>>>(
    args?: {
      where?: LeagueLineupWhereInput;
      orderBy?: LeagueLineupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  league_members: <T = Promise<AsyncIterator<LeagueMemberSubscription>>>(
    args?: {
      where?: LeagueMemberWhereInput;
      orderBy?: LeagueMemberOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  owner_user: <T = UserSubscription>() => T;
}

export interface AggregateNflGame {
  count: Int;
}

export interface AggregateNflGamePromise
  extends Promise<AggregateNflGame>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNflGameSubscription
  extends Promise<AsyncIterator<AggregateNflGame>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LineupEdge {
  cursor: String;
}

export interface LineupEdgePromise extends Promise<LineupEdge>, Fragmentable {
  node: <T = LineupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LineupEdgeSubscription
  extends Promise<AsyncIterator<LineupEdge>>,
    Fragmentable {
  node: <T = LineupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NflPlayerSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface NflPlayerSubscriptionPayloadPromise
  extends Promise<NflPlayerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NflPlayerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NflPlayerPreviousValuesPromise>() => T;
}

export interface NflPlayerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NflPlayerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NflPlayerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NflPlayerPreviousValuesSubscription>() => T;
}

export interface AggregateFlipGamePlayer {
  count: Int;
}

export interface AggregateFlipGamePlayerPromise
  extends Promise<AggregateFlipGamePlayer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFlipGamePlayerSubscription
  extends Promise<AsyncIterator<AggregateFlipGamePlayer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NflGamePreviousValues {
  id: Int;
  week: Int;
  season: Int;
  nfl_feed_id: Int;
  nfl_feed_key: Int;
  start: DateTimeOutput;
  season_type: GameSeasonType;
}

export interface NflGamePreviousValuesPromise
  extends Promise<NflGamePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  week: () => Promise<Int>;
  season: () => Promise<Int>;
  nfl_feed_id: () => Promise<Int>;
  nfl_feed_key: () => Promise<Int>;
  start: () => Promise<DateTimeOutput>;
  season_type: () => Promise<GameSeasonType>;
}

export interface NflGamePreviousValuesSubscription
  extends Promise<AsyncIterator<NflGamePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  week: () => Promise<AsyncIterator<Int>>;
  season: () => Promise<AsyncIterator<Int>>;
  nfl_feed_id: () => Promise<AsyncIterator<Int>>;
  nfl_feed_key: () => Promise<AsyncIterator<Int>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  season_type: () => Promise<AsyncIterator<GameSeasonType>>;
}

export interface NflGameSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface NflGameSubscriptionPayloadPromise
  extends Promise<NflGameSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NflGamePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NflGamePreviousValuesPromise>() => T;
}

export interface NflGameSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NflGameSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NflGameSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NflGamePreviousValuesSubscription>() => T;
}

export interface LeagueMemberConnection {}

export interface LeagueMemberConnectionPromise
  extends Promise<LeagueMemberConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LeagueMemberEdge>>() => T;
  aggregate: <T = AggregateLeagueMemberPromise>() => T;
}

export interface LeagueMemberConnectionSubscription
  extends Promise<AsyncIterator<LeagueMemberConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LeagueMemberEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLeagueMemberSubscription>() => T;
}

export interface AggregateLineupPlayer {
  count: Int;
}

export interface AggregateLineupPlayerPromise
  extends Promise<AggregateLineupPlayer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLineupPlayerSubscription
  extends Promise<AsyncIterator<AggregateLineupPlayer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NflTeam {
  id: Int;
  city: String;
  code: String;
  full_name: String;
  name: String;
  nfl_feed_id: String;
}

export interface NflTeamPromise extends Promise<NflTeam>, Fragmentable {
  id: () => Promise<Int>;
  city: () => Promise<String>;
  code: () => Promise<String>;
  full_name: () => Promise<String>;
  name: () => Promise<String>;
  nfl_feed_id: () => Promise<String>;
  nfl_players: <T = FragmentableArray<NflPlayer>>(
    args?: {
      where?: NflPlayerWhereInput;
      orderBy?: NflPlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface NflTeamSubscription
  extends Promise<AsyncIterator<NflTeam>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  city: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  full_name: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  nfl_feed_id: () => Promise<AsyncIterator<String>>;
  nfl_players: <T = Promise<AsyncIterator<NflPlayerSubscription>>>(
    args?: {
      where?: NflPlayerWhereInput;
      orderBy?: NflPlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateLeague {
  count: Int;
}

export interface AggregateLeaguePromise
  extends Promise<AggregateLeague>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLeagueSubscription
  extends Promise<AsyncIterator<AggregateLeague>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "FlipGamePlayer",
    embedded: false
  },
  {
    name: "FlipPosition",
    embedded: false
  },
  {
    name: "GameSeasonType",
    embedded: false
  },
  {
    name: "League",
    embedded: false
  },
  {
    name: "LeagueLineup",
    embedded: false
  },
  {
    name: "LeagueMember",
    embedded: false
  },
  {
    name: "Lineup",
    embedded: false
  },
  {
    name: "LineupPlayer",
    embedded: false
  },
  {
    name: "NflGame",
    embedded: false
  },
  {
    name: "NflPlayer",
    embedded: false
  },
  {
    name: "NflTeam",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
