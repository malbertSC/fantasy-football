# source: http://localhost:4466
# timestamp: Sun Dec 09 2018 15:39:20 GMT-0500 (EST)

type AggregateLeague {
  count: Int!
}

type AggregateNflPlayer {
  count: Int!
}

type AggregateNflTeam {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateTeamPlayer {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""Raw JSON value"""
scalar Json

type League {
  id: Int!
  name: String!
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
}

"""A connection to a list of items."""
type LeagueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LeagueEdge]!
  aggregate: AggregateLeague!
}

input LeagueCreateInput {
  name: String!
  teams: TeamCreateManyWithoutLeagueInput
}

input LeagueCreateOneWithoutTeamsInput {
  create: LeagueCreateWithoutTeamsInput
  connect: LeagueWhereUniqueInput
}

input LeagueCreateWithoutTeamsInput {
  name: String!
}

"""An edge in a connection."""
type LeagueEdge {
  """The item at the end of the edge."""
  node: League!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LeagueOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type LeaguePreviousValues {
  id: Int!
  name: String!
}

type LeagueSubscriptionPayload {
  mutation: MutationType!
  node: League
  updatedFields: [String!]
  previousValues: LeaguePreviousValues
}

input LeagueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LeagueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LeagueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LeagueSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LeagueWhereInput
}

input LeagueUpdateInput {
  name: String
  teams: TeamUpdateManyWithoutLeagueInput
}

input LeagueUpdateManyMutationInput {
  name: String
}

input LeagueUpdateOneRequiredWithoutTeamsInput {
  create: LeagueCreateWithoutTeamsInput
  connect: LeagueWhereUniqueInput
  update: LeagueUpdateWithoutTeamsDataInput
  upsert: LeagueUpsertWithoutTeamsInput
}

input LeagueUpdateWithoutTeamsDataInput {
  name: String
}

input LeagueUpsertWithoutTeamsInput {
  update: LeagueUpdateWithoutTeamsDataInput!
  create: LeagueCreateWithoutTeamsInput!
}

input LeagueWhereInput {
  """Logical AND on all given filters."""
  AND: [LeagueWhereInput!]

  """Logical OR on all given filters."""
  OR: [LeagueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LeagueWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  teams_every: TeamWhereInput
  teams_some: TeamWhereInput
  teams_none: TeamWhereInput
}

input LeagueWhereUniqueInput {
  id: Int
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createLeague(data: LeagueCreateInput!): League!
  createNflPlayer(data: NflPlayerCreateInput!): NflPlayer!
  createNflTeam(data: NflTeamCreateInput!): NflTeam!
  createTeam(data: TeamCreateInput!): Team!
  createTeamPlayer(data: TeamPlayerCreateInput!): TeamPlayer!
  updateLeague(data: LeagueUpdateInput!, where: LeagueWhereUniqueInput!): League
  updateNflPlayer(data: NflPlayerUpdateInput!, where: NflPlayerWhereUniqueInput!): NflPlayer
  updateNflTeam(data: NflTeamUpdateInput!, where: NflTeamWhereUniqueInput!): NflTeam
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateTeamPlayer(data: TeamPlayerUpdateInput!, where: TeamPlayerWhereUniqueInput!): TeamPlayer
  deleteLeague(where: LeagueWhereUniqueInput!): League
  deleteNflPlayer(where: NflPlayerWhereUniqueInput!): NflPlayer
  deleteNflTeam(where: NflTeamWhereUniqueInput!): NflTeam
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteTeamPlayer(where: TeamPlayerWhereUniqueInput!): TeamPlayer
  upsertLeague(where: LeagueWhereUniqueInput!, create: LeagueCreateInput!, update: LeagueUpdateInput!): League!
  upsertNflPlayer(where: NflPlayerWhereUniqueInput!, create: NflPlayerCreateInput!, update: NflPlayerUpdateInput!): NflPlayer!
  upsertNflTeam(where: NflTeamWhereUniqueInput!, create: NflTeamCreateInput!, update: NflTeamUpdateInput!): NflTeam!
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  upsertTeamPlayer(where: TeamPlayerWhereUniqueInput!, create: TeamPlayerCreateInput!, update: TeamPlayerUpdateInput!): TeamPlayer!
  updateManyLeagues(data: LeagueUpdateManyMutationInput!, where: LeagueWhereInput): BatchPayload!
  updateManyNflPlayers(data: NflPlayerUpdateManyMutationInput!, where: NflPlayerWhereInput): BatchPayload!
  updateManyNflTeams(data: NflTeamUpdateManyMutationInput!, where: NflTeamWhereInput): BatchPayload!
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  deleteManyLeagues(where: LeagueWhereInput): BatchPayload!
  deleteManyNflPlayers(where: NflPlayerWhereInput): BatchPayload!
  deleteManyNflTeams(where: NflTeamWhereInput): BatchPayload!
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  deleteManyTeamPlayers(where: TeamPlayerWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type NflPlayer {
  id: Int!
  display_name: String!
  esb_id: String!
  first_name: String!
  gsis_id: String
  last_name: String!
  nfl_feed_id: String!
  nfl_team: NflTeam!
  position: String!
  position_group: String!
  status: String!
  team_players(where: TeamPlayerWhereInput, orderBy: TeamPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamPlayer!]
}

"""A connection to a list of items."""
type NflPlayerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NflPlayerEdge]!
  aggregate: AggregateNflPlayer!
}

input NflPlayerCreateInput {
  display_name: String!
  esb_id: String!
  first_name: String!
  gsis_id: String
  last_name: String!
  nfl_feed_id: String!
  position: String!
  position_group: String!
  status: String!
  nfl_team: NflTeamCreateOneWithoutNfl_playersInput!
  team_players: TeamPlayerCreateManyWithoutNfl_playerInput
}

input NflPlayerCreateManyWithoutNfl_teamInput {
  create: [NflPlayerCreateWithoutNfl_teamInput!]
  connect: [NflPlayerWhereUniqueInput!]
}

input NflPlayerCreateOneWithoutTeam_playersInput {
  create: NflPlayerCreateWithoutTeam_playersInput
  connect: NflPlayerWhereUniqueInput
}

input NflPlayerCreateWithoutNfl_teamInput {
  display_name: String!
  esb_id: String!
  first_name: String!
  gsis_id: String
  last_name: String!
  nfl_feed_id: String!
  position: String!
  position_group: String!
  status: String!
  team_players: TeamPlayerCreateManyWithoutNfl_playerInput
}

input NflPlayerCreateWithoutTeam_playersInput {
  display_name: String!
  esb_id: String!
  first_name: String!
  gsis_id: String
  last_name: String!
  nfl_feed_id: String!
  position: String!
  position_group: String!
  status: String!
  nfl_team: NflTeamCreateOneWithoutNfl_playersInput!
}

"""An edge in a connection."""
type NflPlayerEdge {
  """The item at the end of the edge."""
  node: NflPlayer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NflPlayerOrderByInput {
  id_ASC
  id_DESC
  display_name_ASC
  display_name_DESC
  esb_id_ASC
  esb_id_DESC
  first_name_ASC
  first_name_DESC
  gsis_id_ASC
  gsis_id_DESC
  last_name_ASC
  last_name_DESC
  nfl_feed_id_ASC
  nfl_feed_id_DESC
  position_ASC
  position_DESC
  position_group_ASC
  position_group_DESC
  status_ASC
  status_DESC
}

type NflPlayerPreviousValues {
  id: Int!
  display_name: String!
  esb_id: String!
  first_name: String!
  gsis_id: String
  last_name: String!
  nfl_feed_id: String!
  position: String!
  position_group: String!
  status: String!
}

type NflPlayerSubscriptionPayload {
  mutation: MutationType!
  node: NflPlayer
  updatedFields: [String!]
  previousValues: NflPlayerPreviousValues
}

input NflPlayerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NflPlayerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NflPlayerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NflPlayerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NflPlayerWhereInput
}

input NflPlayerUpdateInput {
  display_name: String
  esb_id: String
  first_name: String
  gsis_id: String
  last_name: String
  nfl_feed_id: String
  position: String
  position_group: String
  status: String
  nfl_team: NflTeamUpdateOneRequiredWithoutNfl_playersInput
  team_players: TeamPlayerUpdateManyWithoutNfl_playerInput
}

input NflPlayerUpdateManyMutationInput {
  display_name: String
  esb_id: String
  first_name: String
  gsis_id: String
  last_name: String
  nfl_feed_id: String
  position: String
  position_group: String
  status: String
}

input NflPlayerUpdateManyWithoutNfl_teamInput {
  create: [NflPlayerCreateWithoutNfl_teamInput!]
  connect: [NflPlayerWhereUniqueInput!]
  disconnect: [NflPlayerWhereUniqueInput!]
  delete: [NflPlayerWhereUniqueInput!]
  update: [NflPlayerUpdateWithWhereUniqueWithoutNfl_teamInput!]
  upsert: [NflPlayerUpsertWithWhereUniqueWithoutNfl_teamInput!]
}

input NflPlayerUpdateOneRequiredWithoutTeam_playersInput {
  create: NflPlayerCreateWithoutTeam_playersInput
  connect: NflPlayerWhereUniqueInput
  update: NflPlayerUpdateWithoutTeam_playersDataInput
  upsert: NflPlayerUpsertWithoutTeam_playersInput
}

input NflPlayerUpdateWithoutNfl_teamDataInput {
  display_name: String
  esb_id: String
  first_name: String
  gsis_id: String
  last_name: String
  nfl_feed_id: String
  position: String
  position_group: String
  status: String
  team_players: TeamPlayerUpdateManyWithoutNfl_playerInput
}

input NflPlayerUpdateWithoutTeam_playersDataInput {
  display_name: String
  esb_id: String
  first_name: String
  gsis_id: String
  last_name: String
  nfl_feed_id: String
  position: String
  position_group: String
  status: String
  nfl_team: NflTeamUpdateOneRequiredWithoutNfl_playersInput
}

input NflPlayerUpdateWithWhereUniqueWithoutNfl_teamInput {
  where: NflPlayerWhereUniqueInput!
  data: NflPlayerUpdateWithoutNfl_teamDataInput!
}

input NflPlayerUpsertWithoutTeam_playersInput {
  update: NflPlayerUpdateWithoutTeam_playersDataInput!
  create: NflPlayerCreateWithoutTeam_playersInput!
}

input NflPlayerUpsertWithWhereUniqueWithoutNfl_teamInput {
  where: NflPlayerWhereUniqueInput!
  update: NflPlayerUpdateWithoutNfl_teamDataInput!
  create: NflPlayerCreateWithoutNfl_teamInput!
}

input NflPlayerWhereInput {
  """Logical AND on all given filters."""
  AND: [NflPlayerWhereInput!]

  """Logical OR on all given filters."""
  OR: [NflPlayerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NflPlayerWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  display_name: String

  """All values that are not equal to given value."""
  display_name_not: String

  """All values that are contained in given list."""
  display_name_in: [String!]

  """All values that are not contained in given list."""
  display_name_not_in: [String!]

  """All values less than the given value."""
  display_name_lt: String

  """All values less than or equal the given value."""
  display_name_lte: String

  """All values greater than the given value."""
  display_name_gt: String

  """All values greater than or equal the given value."""
  display_name_gte: String

  """All values containing the given string."""
  display_name_contains: String

  """All values not containing the given string."""
  display_name_not_contains: String

  """All values starting with the given string."""
  display_name_starts_with: String

  """All values not starting with the given string."""
  display_name_not_starts_with: String

  """All values ending with the given string."""
  display_name_ends_with: String

  """All values not ending with the given string."""
  display_name_not_ends_with: String
  esb_id: String

  """All values that are not equal to given value."""
  esb_id_not: String

  """All values that are contained in given list."""
  esb_id_in: [String!]

  """All values that are not contained in given list."""
  esb_id_not_in: [String!]

  """All values less than the given value."""
  esb_id_lt: String

  """All values less than or equal the given value."""
  esb_id_lte: String

  """All values greater than the given value."""
  esb_id_gt: String

  """All values greater than or equal the given value."""
  esb_id_gte: String

  """All values containing the given string."""
  esb_id_contains: String

  """All values not containing the given string."""
  esb_id_not_contains: String

  """All values starting with the given string."""
  esb_id_starts_with: String

  """All values not starting with the given string."""
  esb_id_not_starts_with: String

  """All values ending with the given string."""
  esb_id_ends_with: String

  """All values not ending with the given string."""
  esb_id_not_ends_with: String
  first_name: String

  """All values that are not equal to given value."""
  first_name_not: String

  """All values that are contained in given list."""
  first_name_in: [String!]

  """All values that are not contained in given list."""
  first_name_not_in: [String!]

  """All values less than the given value."""
  first_name_lt: String

  """All values less than or equal the given value."""
  first_name_lte: String

  """All values greater than the given value."""
  first_name_gt: String

  """All values greater than or equal the given value."""
  first_name_gte: String

  """All values containing the given string."""
  first_name_contains: String

  """All values not containing the given string."""
  first_name_not_contains: String

  """All values starting with the given string."""
  first_name_starts_with: String

  """All values not starting with the given string."""
  first_name_not_starts_with: String

  """All values ending with the given string."""
  first_name_ends_with: String

  """All values not ending with the given string."""
  first_name_not_ends_with: String
  gsis_id: String

  """All values that are not equal to given value."""
  gsis_id_not: String

  """All values that are contained in given list."""
  gsis_id_in: [String!]

  """All values that are not contained in given list."""
  gsis_id_not_in: [String!]

  """All values less than the given value."""
  gsis_id_lt: String

  """All values less than or equal the given value."""
  gsis_id_lte: String

  """All values greater than the given value."""
  gsis_id_gt: String

  """All values greater than or equal the given value."""
  gsis_id_gte: String

  """All values containing the given string."""
  gsis_id_contains: String

  """All values not containing the given string."""
  gsis_id_not_contains: String

  """All values starting with the given string."""
  gsis_id_starts_with: String

  """All values not starting with the given string."""
  gsis_id_not_starts_with: String

  """All values ending with the given string."""
  gsis_id_ends_with: String

  """All values not ending with the given string."""
  gsis_id_not_ends_with: String
  last_name: String

  """All values that are not equal to given value."""
  last_name_not: String

  """All values that are contained in given list."""
  last_name_in: [String!]

  """All values that are not contained in given list."""
  last_name_not_in: [String!]

  """All values less than the given value."""
  last_name_lt: String

  """All values less than or equal the given value."""
  last_name_lte: String

  """All values greater than the given value."""
  last_name_gt: String

  """All values greater than or equal the given value."""
  last_name_gte: String

  """All values containing the given string."""
  last_name_contains: String

  """All values not containing the given string."""
  last_name_not_contains: String

  """All values starting with the given string."""
  last_name_starts_with: String

  """All values not starting with the given string."""
  last_name_not_starts_with: String

  """All values ending with the given string."""
  last_name_ends_with: String

  """All values not ending with the given string."""
  last_name_not_ends_with: String
  nfl_feed_id: String

  """All values that are not equal to given value."""
  nfl_feed_id_not: String

  """All values that are contained in given list."""
  nfl_feed_id_in: [String!]

  """All values that are not contained in given list."""
  nfl_feed_id_not_in: [String!]

  """All values less than the given value."""
  nfl_feed_id_lt: String

  """All values less than or equal the given value."""
  nfl_feed_id_lte: String

  """All values greater than the given value."""
  nfl_feed_id_gt: String

  """All values greater than or equal the given value."""
  nfl_feed_id_gte: String

  """All values containing the given string."""
  nfl_feed_id_contains: String

  """All values not containing the given string."""
  nfl_feed_id_not_contains: String

  """All values starting with the given string."""
  nfl_feed_id_starts_with: String

  """All values not starting with the given string."""
  nfl_feed_id_not_starts_with: String

  """All values ending with the given string."""
  nfl_feed_id_ends_with: String

  """All values not ending with the given string."""
  nfl_feed_id_not_ends_with: String
  position: String

  """All values that are not equal to given value."""
  position_not: String

  """All values that are contained in given list."""
  position_in: [String!]

  """All values that are not contained in given list."""
  position_not_in: [String!]

  """All values less than the given value."""
  position_lt: String

  """All values less than or equal the given value."""
  position_lte: String

  """All values greater than the given value."""
  position_gt: String

  """All values greater than or equal the given value."""
  position_gte: String

  """All values containing the given string."""
  position_contains: String

  """All values not containing the given string."""
  position_not_contains: String

  """All values starting with the given string."""
  position_starts_with: String

  """All values not starting with the given string."""
  position_not_starts_with: String

  """All values ending with the given string."""
  position_ends_with: String

  """All values not ending with the given string."""
  position_not_ends_with: String
  position_group: String

  """All values that are not equal to given value."""
  position_group_not: String

  """All values that are contained in given list."""
  position_group_in: [String!]

  """All values that are not contained in given list."""
  position_group_not_in: [String!]

  """All values less than the given value."""
  position_group_lt: String

  """All values less than or equal the given value."""
  position_group_lte: String

  """All values greater than the given value."""
  position_group_gt: String

  """All values greater than or equal the given value."""
  position_group_gte: String

  """All values containing the given string."""
  position_group_contains: String

  """All values not containing the given string."""
  position_group_not_contains: String

  """All values starting with the given string."""
  position_group_starts_with: String

  """All values not starting with the given string."""
  position_group_not_starts_with: String

  """All values ending with the given string."""
  position_group_ends_with: String

  """All values not ending with the given string."""
  position_group_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  nfl_team: NflTeamWhereInput
  team_players_every: TeamPlayerWhereInput
  team_players_some: TeamPlayerWhereInput
  team_players_none: TeamPlayerWhereInput
}

input NflPlayerWhereUniqueInput {
  id: Int
  nfl_feed_id: String
}

type NflTeam {
  id: Int!
  city: String!
  code: String!
  full_name: String!
  name: String!
  nfl_feed_id: String!
  nfl_players(where: NflPlayerWhereInput, orderBy: NflPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NflPlayer!]
}

"""A connection to a list of items."""
type NflTeamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NflTeamEdge]!
  aggregate: AggregateNflTeam!
}

input NflTeamCreateInput {
  city: String!
  code: String!
  full_name: String!
  name: String!
  nfl_feed_id: String!
  nfl_players: NflPlayerCreateManyWithoutNfl_teamInput
}

input NflTeamCreateOneWithoutNfl_playersInput {
  create: NflTeamCreateWithoutNfl_playersInput
  connect: NflTeamWhereUniqueInput
}

input NflTeamCreateWithoutNfl_playersInput {
  city: String!
  code: String!
  full_name: String!
  name: String!
  nfl_feed_id: String!
}

"""An edge in a connection."""
type NflTeamEdge {
  """The item at the end of the edge."""
  node: NflTeam!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NflTeamOrderByInput {
  id_ASC
  id_DESC
  city_ASC
  city_DESC
  code_ASC
  code_DESC
  full_name_ASC
  full_name_DESC
  name_ASC
  name_DESC
  nfl_feed_id_ASC
  nfl_feed_id_DESC
}

type NflTeamPreviousValues {
  id: Int!
  city: String!
  code: String!
  full_name: String!
  name: String!
  nfl_feed_id: String!
}

type NflTeamSubscriptionPayload {
  mutation: MutationType!
  node: NflTeam
  updatedFields: [String!]
  previousValues: NflTeamPreviousValues
}

input NflTeamSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NflTeamSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NflTeamSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NflTeamSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NflTeamWhereInput
}

input NflTeamUpdateInput {
  city: String
  code: String
  full_name: String
  name: String
  nfl_feed_id: String
  nfl_players: NflPlayerUpdateManyWithoutNfl_teamInput
}

input NflTeamUpdateManyMutationInput {
  city: String
  code: String
  full_name: String
  name: String
  nfl_feed_id: String
}

input NflTeamUpdateOneRequiredWithoutNfl_playersInput {
  create: NflTeamCreateWithoutNfl_playersInput
  connect: NflTeamWhereUniqueInput
  update: NflTeamUpdateWithoutNfl_playersDataInput
  upsert: NflTeamUpsertWithoutNfl_playersInput
}

input NflTeamUpdateWithoutNfl_playersDataInput {
  city: String
  code: String
  full_name: String
  name: String
  nfl_feed_id: String
}

input NflTeamUpsertWithoutNfl_playersInput {
  update: NflTeamUpdateWithoutNfl_playersDataInput!
  create: NflTeamCreateWithoutNfl_playersInput!
}

input NflTeamWhereInput {
  """Logical AND on all given filters."""
  AND: [NflTeamWhereInput!]

  """Logical OR on all given filters."""
  OR: [NflTeamWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NflTeamWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  full_name: String

  """All values that are not equal to given value."""
  full_name_not: String

  """All values that are contained in given list."""
  full_name_in: [String!]

  """All values that are not contained in given list."""
  full_name_not_in: [String!]

  """All values less than the given value."""
  full_name_lt: String

  """All values less than or equal the given value."""
  full_name_lte: String

  """All values greater than the given value."""
  full_name_gt: String

  """All values greater than or equal the given value."""
  full_name_gte: String

  """All values containing the given string."""
  full_name_contains: String

  """All values not containing the given string."""
  full_name_not_contains: String

  """All values starting with the given string."""
  full_name_starts_with: String

  """All values not starting with the given string."""
  full_name_not_starts_with: String

  """All values ending with the given string."""
  full_name_ends_with: String

  """All values not ending with the given string."""
  full_name_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  nfl_feed_id: String

  """All values that are not equal to given value."""
  nfl_feed_id_not: String

  """All values that are contained in given list."""
  nfl_feed_id_in: [String!]

  """All values that are not contained in given list."""
  nfl_feed_id_not_in: [String!]

  """All values less than the given value."""
  nfl_feed_id_lt: String

  """All values less than or equal the given value."""
  nfl_feed_id_lte: String

  """All values greater than the given value."""
  nfl_feed_id_gt: String

  """All values greater than or equal the given value."""
  nfl_feed_id_gte: String

  """All values containing the given string."""
  nfl_feed_id_contains: String

  """All values not containing the given string."""
  nfl_feed_id_not_contains: String

  """All values starting with the given string."""
  nfl_feed_id_starts_with: String

  """All values not starting with the given string."""
  nfl_feed_id_not_starts_with: String

  """All values ending with the given string."""
  nfl_feed_id_ends_with: String

  """All values not ending with the given string."""
  nfl_feed_id_not_ends_with: String
  nfl_players_every: NflPlayerWhereInput
  nfl_players_some: NflPlayerWhereInput
  nfl_players_none: NflPlayerWhereInput
}

input NflTeamWhereUniqueInput {
  id: Int
  nfl_feed_id: String
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  leagues(where: LeagueWhereInput, orderBy: LeagueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [League]!
  nflPlayers(where: NflPlayerWhereInput, orderBy: NflPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NflPlayer]!
  nflTeams(where: NflTeamWhereInput, orderBy: NflTeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NflTeam]!
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  teamPlayers(where: TeamPlayerWhereInput, orderBy: TeamPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamPlayer]!
  league(where: LeagueWhereUniqueInput!): League
  nflPlayer(where: NflPlayerWhereUniqueInput!): NflPlayer
  nflTeam(where: NflTeamWhereUniqueInput!): NflTeam
  team(where: TeamWhereUniqueInput!): Team
  teamPlayer(where: TeamPlayerWhereUniqueInput!): TeamPlayer
  leaguesConnection(where: LeagueWhereInput, orderBy: LeagueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LeagueConnection!
  nflPlayersConnection(where: NflPlayerWhereInput, orderBy: NflPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NflPlayerConnection!
  nflTeamsConnection(where: NflTeamWhereInput, orderBy: NflTeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NflTeamConnection!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  teamPlayersConnection(where: TeamPlayerWhereInput, orderBy: TeamPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamPlayerConnection!
}

type Subscription {
  league(where: LeagueSubscriptionWhereInput): LeagueSubscriptionPayload
  nflPlayer(where: NflPlayerSubscriptionWhereInput): NflPlayerSubscriptionPayload
  nflTeam(where: NflTeamSubscriptionWhereInput): NflTeamSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  teamPlayer(where: TeamPlayerSubscriptionWhereInput): TeamPlayerSubscriptionPayload
}

type Team {
  id: Int!
  league: League!
  name: String!
  team_players(where: TeamPlayerWhereInput, orderBy: TeamPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamPlayer!]
}

"""A connection to a list of items."""
type TeamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  name: String!
  league: LeagueCreateOneWithoutTeamsInput!
  team_players: TeamPlayerCreateManyWithoutTeamInput
}

input TeamCreateManyWithoutLeagueInput {
  create: [TeamCreateWithoutLeagueInput!]
  connect: [TeamWhereUniqueInput!]
}

input TeamCreateOneWithoutTeam_playersInput {
  create: TeamCreateWithoutTeam_playersInput
  connect: TeamWhereUniqueInput
}

input TeamCreateWithoutLeagueInput {
  name: String!
  team_players: TeamPlayerCreateManyWithoutTeamInput
}

input TeamCreateWithoutTeam_playersInput {
  name: String!
  league: LeagueCreateOneWithoutTeamsInput!
}

"""An edge in a connection."""
type TeamEdge {
  """The item at the end of the edge."""
  node: Team!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type TeamPlayer {
  id: Int!
  nfl_player: NflPlayer!
  team: Team!
}

"""A connection to a list of items."""
type TeamPlayerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamPlayerEdge]!
  aggregate: AggregateTeamPlayer!
}

input TeamPlayerCreateInput {
  nfl_player: NflPlayerCreateOneWithoutTeam_playersInput!
  team: TeamCreateOneWithoutTeam_playersInput!
}

input TeamPlayerCreateManyWithoutNfl_playerInput {
  create: [TeamPlayerCreateWithoutNfl_playerInput!]
  connect: [TeamPlayerWhereUniqueInput!]
}

input TeamPlayerCreateManyWithoutTeamInput {
  create: [TeamPlayerCreateWithoutTeamInput!]
  connect: [TeamPlayerWhereUniqueInput!]
}

input TeamPlayerCreateWithoutNfl_playerInput {
  team: TeamCreateOneWithoutTeam_playersInput!
}

input TeamPlayerCreateWithoutTeamInput {
  nfl_player: NflPlayerCreateOneWithoutTeam_playersInput!
}

"""An edge in a connection."""
type TeamPlayerEdge {
  """The item at the end of the edge."""
  node: TeamPlayer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TeamPlayerOrderByInput {
  id_ASC
  id_DESC
}

type TeamPlayerPreviousValues {
  id: Int!
}

type TeamPlayerSubscriptionPayload {
  mutation: MutationType!
  node: TeamPlayer
  updatedFields: [String!]
  previousValues: TeamPlayerPreviousValues
}

input TeamPlayerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamPlayerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamPlayerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamPlayerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamPlayerWhereInput
}

input TeamPlayerUpdateInput {
  nfl_player: NflPlayerUpdateOneRequiredWithoutTeam_playersInput
  team: TeamUpdateOneRequiredWithoutTeam_playersInput
}

input TeamPlayerUpdateManyWithoutNfl_playerInput {
  create: [TeamPlayerCreateWithoutNfl_playerInput!]
  connect: [TeamPlayerWhereUniqueInput!]
  disconnect: [TeamPlayerWhereUniqueInput!]
  delete: [TeamPlayerWhereUniqueInput!]
  update: [TeamPlayerUpdateWithWhereUniqueWithoutNfl_playerInput!]
  upsert: [TeamPlayerUpsertWithWhereUniqueWithoutNfl_playerInput!]
}

input TeamPlayerUpdateManyWithoutTeamInput {
  create: [TeamPlayerCreateWithoutTeamInput!]
  connect: [TeamPlayerWhereUniqueInput!]
  disconnect: [TeamPlayerWhereUniqueInput!]
  delete: [TeamPlayerWhereUniqueInput!]
  update: [TeamPlayerUpdateWithWhereUniqueWithoutTeamInput!]
  upsert: [TeamPlayerUpsertWithWhereUniqueWithoutTeamInput!]
}

input TeamPlayerUpdateWithoutNfl_playerDataInput {
  team: TeamUpdateOneRequiredWithoutTeam_playersInput
}

input TeamPlayerUpdateWithoutTeamDataInput {
  nfl_player: NflPlayerUpdateOneRequiredWithoutTeam_playersInput
}

input TeamPlayerUpdateWithWhereUniqueWithoutNfl_playerInput {
  where: TeamPlayerWhereUniqueInput!
  data: TeamPlayerUpdateWithoutNfl_playerDataInput!
}

input TeamPlayerUpdateWithWhereUniqueWithoutTeamInput {
  where: TeamPlayerWhereUniqueInput!
  data: TeamPlayerUpdateWithoutTeamDataInput!
}

input TeamPlayerUpsertWithWhereUniqueWithoutNfl_playerInput {
  where: TeamPlayerWhereUniqueInput!
  update: TeamPlayerUpdateWithoutNfl_playerDataInput!
  create: TeamPlayerCreateWithoutNfl_playerInput!
}

input TeamPlayerUpsertWithWhereUniqueWithoutTeamInput {
  where: TeamPlayerWhereUniqueInput!
  update: TeamPlayerUpdateWithoutTeamDataInput!
  create: TeamPlayerCreateWithoutTeamInput!
}

input TeamPlayerWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamPlayerWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamPlayerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamPlayerWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  nfl_player: NflPlayerWhereInput
  team: TeamWhereInput
}

input TeamPlayerWhereUniqueInput {
  id: Int
}

type TeamPreviousValues {
  id: Int!
  name: String!
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
}

input TeamUpdateInput {
  name: String
  league: LeagueUpdateOneRequiredWithoutTeamsInput
  team_players: TeamPlayerUpdateManyWithoutTeamInput
}

input TeamUpdateManyMutationInput {
  name: String
}

input TeamUpdateManyWithoutLeagueInput {
  create: [TeamCreateWithoutLeagueInput!]
  connect: [TeamWhereUniqueInput!]
  disconnect: [TeamWhereUniqueInput!]
  delete: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutLeagueInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutLeagueInput!]
}

input TeamUpdateOneRequiredWithoutTeam_playersInput {
  create: TeamCreateWithoutTeam_playersInput
  connect: TeamWhereUniqueInput
  update: TeamUpdateWithoutTeam_playersDataInput
  upsert: TeamUpsertWithoutTeam_playersInput
}

input TeamUpdateWithoutLeagueDataInput {
  name: String
  team_players: TeamPlayerUpdateManyWithoutTeamInput
}

input TeamUpdateWithoutTeam_playersDataInput {
  name: String
  league: LeagueUpdateOneRequiredWithoutTeamsInput
}

input TeamUpdateWithWhereUniqueWithoutLeagueInput {
  where: TeamWhereUniqueInput!
  data: TeamUpdateWithoutLeagueDataInput!
}

input TeamUpsertWithoutTeam_playersInput {
  update: TeamUpdateWithoutTeam_playersDataInput!
  create: TeamCreateWithoutTeam_playersInput!
}

input TeamUpsertWithWhereUniqueWithoutLeagueInput {
  where: TeamWhereUniqueInput!
  update: TeamUpdateWithoutLeagueDataInput!
  create: TeamCreateWithoutLeagueInput!
}

input TeamWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  league: LeagueWhereInput
  team_players_every: TeamPlayerWhereInput
  team_players_some: TeamPlayerWhereInput
  team_players_none: TeamPlayerWhereInput
}

input TeamWhereUniqueInput {
  id: Int
}
